In total 1 of 3 tests failed.


---
Outcome of test 'source_r': ok
All R files could be sourced.



---
Outcome of test 'do1': ok


Details:

cmd_df = do_parse(do_code)
cmd_df = mark_data_manip_cmd(cmd_df)

str(cmd_df)
'data.frame':	38 obs. of  13 variables:
 $ line                   : int  1 2 3 4 5 6 7 8 9 10 ...
 $ do_code                : chr  "use \"data.dta\", clear" "sort group i" "keep in 1/39" "list in 1/5" ...
 $ stata_cmd_original     : chr  "use" "sort" "keep" "list" ...
 $ stata_cmd              : chr  "use" "sort" "keep" "list" ...
 $ rest_of_cmd            : chr  "\"data.dta\", clear" "group i" "in 1/39" "in 1/5" ...
 $ is_by_prefix           : logi  FALSE FALSE FALSE FALSE FALSE TRUE ...
 $ by_group_vars          : chr  "" "" "" "" ...
 $ by_sort_vars           : chr  "" "" "" "" ...
 $ is_quietly_prefix      : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...
 $ stata_translation_error: chr  NA NA NA NA ...
 $ e_results_needed       :List of 38
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..- attr(*, "class")= chr "AsIs"
 $ r_results_needed       :List of 38
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..- attr(*, "class")= chr "AsIs"
 $ do_translate           : logi  TRUE TRUE TRUE FALSE FALSE TRUE ...
NULL

---
#Translate Stata to R commands... ... translation done.
---
# Run translated R commands and compare results


 1 do:  use "data.dta", clear
 1 r:  data = haven::read_dta(file.path(stata2r_env$working_dir, "data.dta")) %>% 
  sfun_normalize_string_nas() %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used 
data = haven::read_dta(file.path(stata2r_env$working_dir, "data.dta")) %>% 
  sfun_normalize_string_nas() %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used

 2 do:  sort group i
 2 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group", "i"))) 
data = dplyr::arrange(data, !!!dplyr::syms(c("group", "i")))

 3 do:  keep in 1/39
 3 r:  data = dplyr::slice(data, 1:39) 
data = dplyr::slice(data, 1:39)

 4 do:  list in 1/5 

 4 r:  not translated since not flagged as data manipulation

 5 do:  display _n 

 5 r:  not translated since not flagged as data manipulation

 6 do:  by group: gen seq = _n
 6 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`seq` = dplyr::row_number()) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`seq` = dplyr::row_number()) %>% 
  dplyr::ungroup()

 7 do:  gen logi = log(i)
 7 r:  data = data %>% 
  dplyr::mutate(`logi` = log(`i`)) 
data = data %>% 
  dplyr::mutate(`logi` = log(`i`))

 8 do:  gen sqrt_i = sqrt(i)
 8 r:  data = data %>% 
  dplyr::mutate(`sqrt_i` = sqrt(`i`)) 
data = data %>% 
  dplyr::mutate(`sqrt_i` = sqrt(`i`))

 9 do:  gen group_num = cond(group=="A",1,cond(group=="B",2,3))
 9 r:  data = data %>% 
  dplyr::mutate(`group_num` = as.numeric(sfun_stata_cond(`group`=="A", 1, sfun_stata_cond(`group`=="B", 2, 3)))) 
data = data %>% 
  dplyr::mutate(`group_num` = as.numeric(sfun_stata_cond(`group`=="A", 1, sfun_stata_cond(`group`=="B", 2, 3))))

 10 do:  egen mean_i_grp = mean(i), by(group)
 10 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`mean_i_grp` = mean(`i`, na.rm = TRUE)) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`mean_i_grp` = mean(`i`, na.rm = TRUE)) %>% 
  dplyr::ungroup()

 11 do:  egen total_i = total(i)
 11 r:  data = data %>% 
  dplyr::mutate(`total_i` = sum(`i`, na.rm = TRUE)) 
data = data %>% 
  dplyr::mutate(`total_i` = sum(`i`, na.rm = TRUE))

 12 do:  bysort group: egen rank_i = rank(i)
 12 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`rank_i` = as.numeric(base::rank(`i`, ties.method = 'average', na.last = 'keep'))) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`rank_i` = as.numeric(base::rank(`i`, ties.method = 'average', na.last = 'keep'))) %>% 
  dplyr::ungroup()

 13 do:  gen flag = (i>20) if group=="A"
 13 r:  data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else((dplyr::coalesce(as.numeric(`group`=="A"), 0) != 0), as.numeric((`i`>20)), NA_real_)) 
data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else((dplyr::coalesce(as.numeric(`group`=="A"), 0) != 0), as.numeric((`i`>20)), NA_real_))

 14 do:  replace flag = 0 if missing(flag)
 14 r:  data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else((dplyr::coalesce(as.numeric(sfun_missing(`flag`)), 0) != 0), 0, data$`flag`)) 
data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else((dplyr::coalesce(as.numeric(sfun_missing(`flag`)), 0) != 0), 0, data$`flag`))

 15 do:  keep if flag==1 | group=="B"
 15 r:  data = dplyr::filter(data, (dplyr::coalesce(as.numeric(`flag`==1 | `group`=="B"), 0) != 0)) 
data = dplyr::filter(data, (dplyr::coalesce(as.numeric(`flag`==1 | `group`=="B"), 0) != 0))

 16 do:  drop if i>35
 16 r:  data = dplyr::filter(data, !(dplyr::coalesce(as.numeric(`i`>35), 0) != 0)) 
data = dplyr::filter(data, !(dplyr::coalesce(as.numeric(`i`>35), 0) != 0))

 17 do:  collapse (mean) i (sum) total_i_sum = i, by(group)
 17 r:  data = data %>% 
  collapse::fgroup_by(group) %>% 
  collapse::fsummarise(`i` = collapse::fmean(`i`, na.rm = TRUE),
  `total_i_sum` = collapse::fsum(`i`, na.rm = TRUE)) %>% 
  collapse::fungroup() 
data = data %>% 
  collapse::fgroup_by(group) %>% 
  collapse::fsummarise(`i` = collapse::fmean(`i`, na.rm = TRUE),
  `total_i_sum` = collapse::fsum(`i`, na.rm = TRUE)) %>% 
  collapse::fungroup()

 18 do:  rename i mean_i_overall
 18 r:  data = collapse::frename(data, `i` = `mean_i_overall`) 
data = collapse::frename(data, `i` = `mean_i_overall`)

 19 do:  expand 2 if group=="C"
 19 r:  stata_tmp_expand_n_values_L19 = 2
stata_tmp_expand_cond_values_L19 = (dplyr::coalesce(as.numeric(with(data, `group`=="C")), 0) != 0)
stata_tmp_final_expand_times_L19 = ifelse(stata_tmp_expand_cond_values_L19, ifelse(is.na(stata_tmp_expand_n_values_L19), 1, pmax(0, as.integer(stata_tmp_expand_n_values_L19))), 1)
data = data[base::rep(1:NROW(data), times = stata_tmp_final_expand_times_L19), ]
data = dplyr::as_tibble(data)
if (exists('stata_tmp_expand_n_values_L19')) rm(stata_tmp_expand_n_values_L19, stata_tmp_expand_cond_values_L19, stata_tmp_final_expand_times_L19) 
stata_tmp_expand_n_values_L19 = 2

stata_tmp_expand_cond_values_L19 = (dplyr::coalesce(as.numeric(with(data, `group`=="C")), 0) != 0)

stata_tmp_final_expand_times_L19 = ifelse(stata_tmp_expand_cond_values_L19, ifelse(is.na(stata_tmp_expand_n_values_L19), 1, pmax(0, as.integer(stata_tmp_expand_n_values_L19))), 1)

data = data[base::rep(1:NROW(data), times = stata_tmp_final_expand_times_L19), ]

data = dplyr::as_tibble(data)

if (exists('stata_tmp_expand_n_values_L19')) rm(stata_tmp_expand_n_values_L19, stata_tmp_expand_cond_values_L19, stata_tmp_final_expand_times_L19)

 20 do:  duplicates drop
 20 r:  ## Calculate duplicate flag based on all variables
stata_tmp_is_duplicate_L20 = base::duplicated(data, fromLast = FALSE)
data = dplyr::filter(data, !(stata_tmp_is_duplicate_L20 & TRUE))
rm(stata_tmp_is_duplicate_L20) 
## Calculate duplicate flag based on all variables

stata_tmp_is_duplicate_L20 = base::duplicated(data, fromLast = FALSE)

data = dplyr::filter(data, !(stata_tmp_is_duplicate_L20 & TRUE))

rm(stata_tmp_is_duplicate_L20)

 21 do:  encode group, gen(group_code)
 21 r:  data = dplyr::mutate(data, `group_code` = NA_integer_)
temp_source_vector_L21 = data[['group']]
temp_unique_values_L21 = base::sort(base::unique(temp_source_vector_L21[!is.na(temp_source_vector_L21)]))
temp_numeric_values_L21 = base::match(temp_source_vector_L21, temp_unique_values_L21)
temp_labels_vector_L21 = stats::setNames(as.numeric(1:length(temp_unique_values_L21)), temp_unique_values_L21)
stata_tmp_encoded_full_L21 = haven::labelled(as.integer(temp_numeric_values_L21), labels = temp_labels_vector_L21)
rm(temp_source_vector_L21, temp_unique_values_L21, temp_numeric_values_L21, temp_labels_vector_L21)
data[['group_code']] = stata_tmp_encoded_full_L21
rm(stata_tmp_encoded_full_L21) 
data = dplyr::mutate(data, `group_code` = NA_integer_)

temp_source_vector_L21 = data[['group']]

temp_unique_values_L21 = base::sort(base::unique(temp_source_vector_L21[!is.na(temp_source_vector_L21)]))

temp_numeric_values_L21 = base::match(temp_source_vector_L21, temp_unique_values_L21)

temp_labels_vector_L21 = stats::setNames(as.numeric(1:length(temp_unique_values_L21)), temp_unique_values_L21)

stata_tmp_encoded_full_L21 = haven::labelled(as.integer(temp_numeric_values_L21), labels = temp_labels_vector_L21)

rm(temp_source_vector_L21, temp_unique_values_L21, temp_numeric_values_L21, temp_labels_vector_L21)

data[['group_code']] = stata_tmp_encoded_full_L21

rm(stata_tmp_encoded_full_L21)

 22 do:  decode group_code, gen(group_str)
 22 r:  data = dplyr::mutate(data, `group_str` = NA_character_)
## Decode values using haven::as_factor
stata_tmp_source_vector_L22 = data[['group_code']]
stata_tmp_decoded_values_L22 = as.character(haven::as_factor(stata_tmp_source_vector_L22))
stata_tmp_decoded_values_L22 = dplyr::if_else(is.na(stata_tmp_decoded_values_L22), dplyr::if_else(is.na(stata_tmp_source_vector_L22), "", as.character(stata_tmp_source_vector_L22)), stata_tmp_decoded_values_L22)
data = dplyr::mutate(data, `group_str` = stata_tmp_decoded_values_L22)
rm(stata_tmp_decoded_values_L22, stata_tmp_source_vector_L22) 
data = dplyr::mutate(data, `group_str` = NA_character_)

## Decode values using haven::as_factor

stata_tmp_source_vector_L22 = data[['group_code']]

stata_tmp_decoded_values_L22 = as.character(haven::as_factor(stata_tmp_source_vector_L22))

stata_tmp_decoded_values_L22 = dplyr::if_else(is.na(stata_tmp_decoded_values_L22), dplyr::if_else(is.na(stata_tmp_source_vector_L22), "", as.character(stata_tmp_source_vector_L22)), stata_tmp_decoded_values_L22)

data = dplyr::mutate(data, `group_str` = stata_tmp_decoded_values_L22)

rm(stata_tmp_decoded_values_L22, stata_tmp_source_vector_L22)

 23 do:  sort group_code
 23 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group_code"))) 
data = dplyr::arrange(data, !!!dplyr::syms(c("group_code")))

 24 do:  tempfile t1
 24 r:  R_tempfile_L24_t1_path = tempfile(fileext = '.dta') # Stata tempfile 't1' 
R_tempfile_L24_t1_path = tempfile(fileext = '.dta') # Stata tempfile 't1'

 25 do:  save "`t1'"
 25 r:  haven::write_dta(data, path = R_tempfile_L24_t1_path) 
haven::write_dta(data, path = R_tempfile_L24_t1_path)

 26 do:  keep if group_code==1
 26 r:  data = dplyr::filter(data, (dplyr::coalesce(as.numeric(`group_code`==1), 0) != 0)) 
data = dplyr::filter(data, (dplyr::coalesce(as.numeric(`group_code`==1), 0) != 0))

 27 do:  merge 1:m group_code using "`t1'", keep(match master) nogenerate
 27 r:  stata_tmp_using_data_L27 = haven::read_dta(R_tempfile_L24_t1_path)
data = sfun_strip_stata_attributes(data)
data = sfun_normalize_string_nas(data)
stata_tmp_using_data_L27 = sfun_strip_stata_attributes(stata_tmp_using_data_L27)
stata_tmp_using_data_L27 = sfun_normalize_string_nas(stata_tmp_using_data_L27)
data = dplyr::mutate(data, `group_code` = as.numeric(`group_code`))
stata_tmp_using_data_L27 = dplyr::mutate(stata_tmp_using_data_L27, `group_code` = as.numeric(`group_code`))
join_type_r_func_L27 = switch('1:m', 
  '1:1' = 'dplyr::full_join',
  '1:m' = 'dplyr::left_join',
  'm:1' = 'dplyr::right_join',
  'm:m' = 'dplyr::inner_join'
)
stata_merge_map_left_only_L27 = 1L
stata_merge_map_right_only_L27 = 2L
stata_merge_map_both_L27 = 3L
if (grepl("\\ball\\b", "match master", ignore.case=TRUE)) {
  join_type_r_func_L27 = "dplyr::full_join"
} else if (grepl("\\bmaster\\b", "match master", ignore.case=TRUE)) {
  join_type_r_func_L27 = "dplyr::left_join"
} else if (grepl("\\busing\\b", "match master", ignore.case=TRUE)) {
  join_type_r_func_L27 = "dplyr::right_join"
} else if (grepl("\\bmatch\\b", "match master", ignore.case=TRUE)) {
  join_type_r_func_L27 = "dplyr::inner_join"
}
common_cols = intersect(names(data), names(stata_tmp_using_data_L27))
common_cols_not_by = setdiff(common_cols, c("group_code"))
if (length(common_cols_not_by) > 0) { stata_tmp_using_data_L27 = dplyr::select(stata_tmp_using_data_L27, -dplyr::all_of(common_cols_not_by)) }
parts_fun_split = stringi::stri_split_fixed(join_type_r_func_L27, "::", n=2)[[1]]
pkg_name_L27 = parts_fun_split[1]
fun_name_L27 = parts_fun_split[2]
merge_fun_obj_L27 = get(fun_name_L27, envir = asNamespace(pkg_name_L27))
data = do.call(merge_fun_obj_L27, list(data, stata_tmp_using_data_L27, by = c("group_code"), indicator = "stata_merge_indicator_L27"))
data = sfun_normalize_string_nas(data)
 # _merge variable was not generated due to 'nogenerate' option.
data = dplyr::select(data, -dplyr::any_of('stata_merge_indicator_L27'))
rm(stata_tmp_using_data_L27, common_cols, common_cols_not_by, parts_fun_split)
rm(join_type_r_func_L27, stata_merge_map_left_only_L27, stata_merge_map_right_only_L27, stata_merge_map_both_L27)
rm(pkg_name_L27, fun_name_L27, merge_fun_obj_L27)
# Stata merge type: 1:m, keep(match master), nogenerate 
stata_tmp_using_data_L27 = haven::read_dta(R_tempfile_L24_t1_path)

data = sfun_strip_stata_attributes(data)

data = sfun_normalize_string_nas(data)

stata_tmp_using_data_L27 = sfun_strip_stata_attributes(stata_tmp_using_data_L27)

stata_tmp_using_data_L27 = sfun_normalize_string_nas(stata_tmp_using_data_L27)

data = dplyr::mutate(data, `group_code` = as.numeric(`group_code`))

stata_tmp_using_data_L27 = dplyr::mutate(stata_tmp_using_data_L27, `group_code` = as.numeric(`group_code`))

join_type_r_func_L27 = switch('1:m', 
  '1:1' = 'dplyr::full_join',
  '1:m' = 'dplyr::left_join',
  'm:1' = 'dplyr::right_join',
  'm:m' = 'dplyr::inner_join'
)

stata_merge_map_left_only_L27 = 1L

stata_merge_map_right_only_L27 = 2L

stata_merge_map_both_L27 = 3L

if (grepl("\\ball\\b", "match master", ignore.case=TRUE)) {
  join_type_r_func_L27 = "dplyr::full_join"
} else if (grepl("\\bmaster\\b", "match master", ignore.case=TRUE)) {
  join_type_r_func_L27 = "dplyr::left_join"
} else if (grepl("\\busing\\b", "match master", ignore.case=TRUE)) {
  join_type_r_func_L27 = "dplyr::right_join"
} else if (grepl("\\bmatch\\b", "match master", ignore.case=TRUE)) {
  join_type_r_func_L27 = "dplyr::inner_join"
}

common_cols = intersect(names(data), names(stata_tmp_using_data_L27))

common_cols_not_by = setdiff(common_cols, c("group_code"))

if (length(common_cols_not_by) > 0) { stata_tmp_using_data_L27 = dplyr::select(stata_tmp_using_data_L27, -dplyr::all_of(common_cols_not_by)) }

parts_fun_split = stringi::stri_split_fixed(join_type_r_func_L27, "::", n=2)[[1]]

pkg_name_L27 = parts_fun_split[1]

fun_name_L27 = parts_fun_split[2]

merge_fun_obj_L27 = get(fun_name_L27, envir = asNamespace(pkg_name_L27))

data = do.call(merge_fun_obj_L27, list(data, stata_tmp_using_data_L27, by = c("group_code"), indicator = "stata_merge_indicator_L27"))

data = sfun_normalize_string_nas(data)

 # _merge variable was not generated due to 'nogenerate' option.

data = dplyr::select(data, -dplyr::any_of('stata_merge_indicator_L27'))

rm(stata_tmp_using_data_L27, common_cols, common_cols_not_by, parts_fun_split)

rm(join_type_r_func_L27, stata_merge_map_left_only_L27, stata_merge_map_right_only_L27, stata_merge_map_both_L27)

rm(pkg_name_L27, fun_name_L27, merge_fun_obj_L27)

# Stata merge type: 1:m, keep(match master), nogenerate

 28 do:  append using "`t1'"
 28 r:  stata_tmp_using_data_L28 = haven::read_dta(R_tempfile_L24_t1_path)
stata_tmp_using_data_L28 = sfun_normalize_string_nas(stata_tmp_using_data_L28)
stata_tmp_master_data_L28 = data
stata_tmp_master_data_L28 = sfun_normalize_string_nas(stata_tmp_master_data_L28)
data = dplyr::bind_rows(stata_tmp_master_data_L28, stata_tmp_using_data_L28)
data = sfun_normalize_string_nas(data)
rm(stata_tmp_using_data_L28, stata_tmp_master_data_L28) 
stata_tmp_using_data_L28 = haven::read_dta(R_tempfile_L24_t1_path)

stata_tmp_using_data_L28 = sfun_normalize_string_nas(stata_tmp_using_data_L28)

stata_tmp_master_data_L28 = data

stata_tmp_master_data_L28 = sfun_normalize_string_nas(stata_tmp_master_data_L28)

data = dplyr::bind_rows(stata_tmp_master_data_L28, stata_tmp_using_data_L28)

data = sfun_normalize_string_nas(data)

rm(stata_tmp_using_data_L28, stata_tmp_master_data_L28)

 29 do:  gen id = _n
 29 r:  data = data %>% 
  dplyr::mutate(`id` = dplyr::row_number()) 
data = data %>% 
  dplyr::mutate(`id` = dplyr::row_number())

 30 do:  bysort group_code (mean_i_overall): gen diff_mean = mean_i_overall - mean_i_overall[_n-1]
 30 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_code"))) %>% 
  dplyr::mutate(`diff_mean` = `mean_i_overall` - dplyr::lag(`mean_i_overall`, n = 1)) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_code"))) %>% 
  dplyr::mutate(`diff_mean` = `mean_i_overall` - dplyr::lag(`mean_i_overall`, n = 1)) %>% 
  dplyr::ungroup()

 31 do:  recode group_code (1=10)(2=20)(3=30)
 31 r:  data = dplyr::mutate(data, `group_code` = dplyr::case_when(
    group_code %in% c(1) ~ 10,
    group_code %in% c(2) ~ 20,
    group_code %in% c(3) ~ 30
  )) 
data = dplyr::mutate(data, `group_code` = dplyr::case_when(
    group_code %in% c(1) ~ 10,
    group_code %in% c(2) ~ 20,
    group_code %in% c(3) ~ 30
  ))

 32 do:  drop if missing(mean_i_overall)
 32 r:  data = dplyr::filter(data, !(dplyr::coalesce(as.numeric(sfun_missing(`mean_i_overall`)), 0) != 0)) 
data = dplyr::filter(data, !(dplyr::coalesce(as.numeric(sfun_missing(`mean_i_overall`)), 0) != 0))

 33 do:  order id group_code mean_i_overall
 33 r:  data = dplyr::select(data, id, group_code, mean_i_overall, dplyr::everything()) 
data = dplyr::select(data, id, group_code, mean_i_overall, dplyr::everything())

 34 do:  collapse (sum) sum_mean = mean_i_overall, by(group_code)
 34 r:  data = data %>% 
  collapse::fgroup_by(group_code) %>% 
  collapse::fsummarise(`sum_mean` = collapse::fsum(`mean_i_overall`, na.rm = TRUE)) %>% 
  collapse::fungroup() 
data = data %>% 
  collapse::fgroup_by(group_code) %>% 
  collapse::fsummarise(`sum_mean` = collapse::fsum(`mean_i_overall`, na.rm = TRUE)) %>% 
  collapse::fungroup()

 35 do:  egen total_sum = total(sum_mean)
 35 r:  data = data %>% 
  dplyr::mutate(`total_sum` = sum(`sum_mean`, na.rm = TRUE)) 
data = data %>% 
  dplyr::mutate(`total_sum` = sum(`sum_mean`, na.rm = TRUE))

 36 do:  gen proportion = sum_mean/total_sum
 36 r:  data = data %>% 
  dplyr::mutate(`proportion` = `sum_mean`/`total_sum`) 
data = data %>% 
  dplyr::mutate(`proportion` = `sum_mean`/`total_sum`)

 37 do:  sort proportion
 37 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("proportion"))) 
data = dplyr::arrange(data, !!!dplyr::syms(c("proportion")))

 38 do:  save "result_data.dta", replace
 38 r:  haven::write_dta(data, path = file.path(stata2r_env$working_dir, "result_data.dta")) # Options ignored: replace 
haven::write_dta(data, path = file.path(stata2r_env$working_dir, "result_data.dta")) # Options ignored: replace


---
Outcome of test 'do4': not ok


Details:

cmd_df = do_parse(do_code)
cmd_df = mark_data_manip_cmd(cmd_df)

str(cmd_df)
'data.frame':	6 obs. of  13 variables:
 $ line                   : int  1 2 3 4 5 6
 $ do_code                : chr  "use \"tricky_data.dta\", clear" "quietly regress y_outcome time" "quietly regress y_outcome x_numeric" "summarize x_numeric y_outcome" ...
 $ stata_cmd_original     : chr  "use" "regress" "regress" "summarize" ...
 $ stata_cmd              : chr  "use" "regress" "regress" "summarize" ...
 $ rest_of_cmd            : chr  "\"tricky_data.dta\", clear" "y_outcome time" "y_outcome x_numeric" "x_numeric y_outcome" ...
 $ is_by_prefix           : logi  FALSE FALSE FALSE FALSE FALSE FALSE
 $ by_group_vars          : chr  "" "" "" "" ...
 $ by_sort_vars           : chr  "" "" "" "" ...
 $ is_quietly_prefix      : logi  FALSE TRUE TRUE FALSE FALSE FALSE
 $ stata_translation_error: chr  NA NA NA NA ...
 $ e_results_needed       :List of 6
  ..$ : chr 
  ..$ : chr "e(sample)"
  ..$ : chr "e(sample)"
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..- attr(*, "class")= chr "AsIs"
 $ r_results_needed       :List of 6
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..- attr(*, "class")= chr "AsIs"
 $ do_translate           : logi  TRUE TRUE TRUE TRUE TRUE TRUE
NULL

---
#Translate Stata to R commands... ... translation done.
---
# Run translated R commands and compare results


 1 do:  use "tricky_data.dta", clear
 1 r:  data = haven::read_dta(file.path(stata2r_env$working_dir, "tricky_data.dta")) %>% 
  sfun_normalize_string_nas() %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used 
data = haven::read_dta(file.path(stata2r_env$working_dir, "tricky_data.dta")) %>% 
  sfun_normalize_string_nas() %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used

 2 do:  quietly regress y_outcome time
 2 r:  temp_eligible_if_L2 = rep(TRUE, NROW(data))
temp_complete_cases_L2 = stats::complete.cases(data[, c('y_outcome','time'), drop=FALSE])
stata_e_sample_L2 = as.integer(temp_eligible_if_L2 & temp_complete_cases_L2)
rm(temp_eligible_if_L2, temp_complete_cases_L2)
# Regression model for e(sample): y_outcome ~ time 
temp_eligible_if_L2 = rep(TRUE, NROW(data))

temp_complete_cases_L2 = stats::complete.cases(data[, c('y_outcome','time'), drop=FALSE])

stata_e_sample_L2 = as.integer(temp_eligible_if_L2 & temp_complete_cases_L2)

rm(temp_eligible_if_L2, temp_complete_cases_L2)

# Regression model for e(sample): y_outcome ~ time

 3 do:  quietly regress y_outcome x_numeric
 3 r:  temp_eligible_if_L3 = rep(TRUE, NROW(data))
temp_complete_cases_L3 = stats::complete.cases(data[, c('y_outcome','x_numeric'), drop=FALSE])
stata_e_sample_L3 = as.integer(temp_eligible_if_L3 & temp_complete_cases_L3)
rm(temp_eligible_if_L3, temp_complete_cases_L3)
# Regression model for e(sample): y_outcome ~ x_numeric 
temp_eligible_if_L3 = rep(TRUE, NROW(data))

temp_complete_cases_L3 = stats::complete.cases(data[, c('y_outcome','x_numeric'), drop=FALSE])

stata_e_sample_L3 = as.integer(temp_eligible_if_L3 & temp_complete_cases_L3)

rm(temp_eligible_if_L3, temp_complete_cases_L3)

# Regression model for e(sample): y_outcome ~ x_numeric

 4 do:  summarize x_numeric y_outcome
 4 r:  stata_r_val_L4_N = NROW(data)
stata_r_val_L4_mean = mean(data[['y_outcome']], na.rm = TRUE)
stata_r_val_L4_sd = stats::sd(data[['y_outcome']], na.rm = TRUE)
stata_r_val_L4_min = min(data[['y_outcome']], na.rm = TRUE)
stata_r_val_L4_max = max(data[['y_outcome']], na.rm = TRUE)
stata_r_val_L4_sum = sum(data[['y_outcome']], na.rm = TRUE) 
stata_r_val_L4_N = NROW(data)

stata_r_val_L4_mean = mean(data[['y_outcome']], na.rm = TRUE)

stata_r_val_L4_sd = stats::sd(data[['y_outcome']], na.rm = TRUE)

stata_r_val_L4_min = min(data[['y_outcome']], na.rm = TRUE)

stata_r_val_L4_max = max(data[['y_outcome']], na.rm = TRUE)

stata_r_val_L4_sum = sum(data[['y_outcome']], na.rm = TRUE)

 5 do:  keep if e(sample)
 5 r:  data = dplyr::filter(data, (dplyr::coalesce(as.numeric(e(`sample`)), 0) != 0)) 
data = dplyr::filter(data, (dplyr::coalesce(as.numeric(e(`sample`)), 0) != 0))

Error: Problem with `filter()` input `..1`.
ℹ Input `..1` is `(dplyr::coalesce(as.numeric(e(sample)), 0) != 0)`.
✖ could not find function "e"
Error executing R code for Stata line  5 :  data = dplyr::filter(data, (dplyr::coalesce(as.numeric(e(`sample`)), 0) != 0))

Error: Problem with `filter()` input `..1`.
ℹ Input `..1` is `(dplyr::coalesce(as.numeric(e(sample)), 0) != 0)`.
✖ could not find function "e" 
