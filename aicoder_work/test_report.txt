In total 2 of 3 tests failed.


---
Outcome of test 'source_r': ok
All R files could be sourced.



---
Outcome of test 'do1': not ok


Details:

cmd_df = do_parse(do_code)
cmd_df = mark_data_manip_cmd(cmd_df)

str(cmd_df)
'data.frame':	38 obs. of  9 variables:
 $ line              : int  1 2 3 4 5 6 7 8 9 10 ...
 $ do_code           : chr  "use \"data.dta\", clear" "sort group i" "keep in 1/39" "list in 1/5" ...
 $ stata_cmd_original: chr  "use" "sort" "keep" "list" ...
 $ stata_cmd         : chr  "use" "sort" "keep" "list" ...
 $ rest_of_cmd       : chr  "\"data.dta\", clear" "group i" "in 1/39" "in 1/5" ...
 $ is_by_prefix      : logi  FALSE FALSE FALSE FALSE FALSE TRUE ...
 $ by_group_vars     : chr  NA NA NA NA ...
 $ by_sort_vars      : chr  NA NA NA NA ...
 $ do_translate      : logi  TRUE TRUE TRUE FALSE FALSE TRUE ...
NULL

---
#Translate Stata to R commands... ... translation done.
---
# Run translated R commands and compare results


 1 do:  use "data.dta", clear
 1 r:  data = haven::read_dta(file.path(stata2r_env$working_dir, "data.dta")) %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used 
data = haven::read_dta(file.path(stata2r_env$working_dir, "data.dta")) %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used

 2 do:  sort group i
 2 r:  data = dplyr::arrange(data, group, i) 
data = dplyr::arrange(data, group, i)

 3 do:  keep in 1/39
 3 r:  data = dplyr::slice(data, 1:39) 
data = dplyr::slice(data, 1:39)

 4 do:  list in 1/5 

 4 r:  not translated since not flagged as data manipulation

 5 do:  display _n 

 5 r:  not translated since not flagged as data manipulation

 6 do:  by group: gen seq = _n
 6 r:  data = data %>%
  dplyr::group_by(dplyr::across(c("group"))) %>%
  dplyr::mutate(seq = as.numeric(dplyr::row_number())) %>%
  dplyr::ungroup() 
data = data %>%
  dplyr::group_by(dplyr::across(c("group"))) %>%
  dplyr::mutate(seq = as.numeric(dplyr::row_number())) %>%
  dplyr::ungroup()

 7 do:  gen logi = log(i)
 7 r:  data = data %>%
  dplyr::mutate(logi = log(i)) 
data = data %>%
  dplyr::mutate(logi = log(i))

 8 do:  gen sqrt_i = sqrt(i)
 8 r:  data = data %>%
  dplyr::mutate(sqrt_i = sqrt(i)) 
data = data %>%
  dplyr::mutate(sqrt_i = sqrt(i))

 9 do:  gen group_num = cond(group=="A",1,cond(group=="B",2,3))
 9 r:  data = data %>%
  dplyr::mutate(group_num = as.numeric(dplyr::if_else(group=="A", 1, dplyr::if_else(group=="B", 2, 3)))) 
data = data %>%
  dplyr::mutate(group_num = as.numeric(dplyr::if_else(group=="A", 1, dplyr::if_else(group=="B", 2, 3))))

 10 do:  egen mean_i_grp = mean(i), by(group)
 10 r:  data = data %>%
  dplyr::group_by(dplyr::across(c("group"))) %>%
  dplyr::mutate(
mean_i_grp = mean(i, na.rm = TRUE)
) %>%
  dplyr::ungroup() 
data = data %>%
  dplyr::group_by(dplyr::across(c("group"))) %>%
  dplyr::mutate(
mean_i_grp = mean(i, na.rm = TRUE)
) %>%
  dplyr::ungroup()

 11 do:  egen total_i = total(i)
 11 r:  data = data %>%
  dplyr::mutate(
total_i = sum(i, na.rm = TRUE)
) 
data = data %>%
  dplyr::mutate(
total_i = sum(i, na.rm = TRUE)
)

 12 do:  bysort group: egen rank_i = rank(i)
 12 r:  data = data %>%
  dplyr::group_by(dplyr::across(c("group"))) %>%
  dplyr::mutate(
rank_i = dplyr::min_rank(i, na.last = "bottom")
) %>%
  dplyr::ungroup() 
data = data %>%
  dplyr::group_by(dplyr::across(c("group"))) %>%
  dplyr::mutate(
rank_i = dplyr::min_rank(i, na.last = "bottom")
) %>%
  dplyr::ungroup()

Error: Problem with `mutate()` column `rank_i`.
ℹ `rank_i = dplyr::min_rank(i, na.last = "bottom")`.
✖ unused argument (na.last = "bottom")
ℹ The error occurred in group 1: group = "A".
Caused by error in `dplyr::min_rank()`:
! unused argument (na.last = "bottom")
Error executing R code for Stata line  12 :  data = data %>%
  dplyr::group_by(dplyr::across(c("group"))) %>%
  dplyr::mutate(
rank_i = dplyr::min_rank(i, na.last = "bottom")
) %>%
  dplyr::ungroup()

Error: Problem with `mutate()` column `rank_i`.
ℹ `rank_i = dplyr::min_rank(i, na.last = "bottom")`.
✖ unused argument (na.last = "bottom")
ℹ The error occurred in group 1: group = "A".
Caused by error in `dplyr::min_rank()`:
! unused argument (na.last = "bottom") 


---
Outcome of test 'do2': not ok


Details:

cmd_df = do_parse(do_code)
cmd_df = mark_data_manip_cmd(cmd_df)

str(cmd_df)
'data.frame':	82 obs. of  9 variables:
 $ line              : int  1 2 3 4 5 6 7 8 9 10 ...
 $ do_code           : chr  "use \"test_data.dta\", clear" "generate value1_log = log(value1)" "generate value2_squared = value2^2" "generate int_value1 = int(value1) if !missing(value1)" ...
 $ stata_cmd_original: chr  "use" "generate" "generate" "generate" ...
 $ stata_cmd         : chr  "use" "generate" "generate" "generate" ...
 $ rest_of_cmd       : chr  "\"test_data.dta\", clear" "value1_log = log(value1)" "value2_squared = value2^2" "int_value1 = int(value1) if !missing(value1)" ...
 $ is_by_prefix      : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...
 $ by_group_vars     : chr  NA NA NA NA ...
 $ by_sort_vars      : chr  NA NA NA NA ...
 $ do_translate      : logi  TRUE TRUE TRUE TRUE TRUE TRUE ...
NULL

---
#Translate Stata to R commands... ... translation done.
---
# Run translated R commands and compare results


 1 do:  use "test_data.dta", clear
 1 r:  data = haven::read_dta(file.path(stata2r_env$working_dir, "test_data.dta")) %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used 
data = haven::read_dta(file.path(stata2r_env$working_dir, "test_data.dta")) %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used

 2 do:  generate value1_log = log(value1)
 2 r:  data = data %>%
  dplyr::mutate(value1_log = log(value1)) 
data = data %>%
  dplyr::mutate(value1_log = log(value1))

 3 do:  generate value2_squared = value2^2
 3 r:  data = data %>%
  dplyr::mutate(value2_squared = value2^2) 
data = data %>%
  dplyr::mutate(value2_squared = value2^2)

 4 do:  generate int_value1 = int(value1) if !missing(value1)
 4 r:  data = data %>%
  dplyr::mutate(int_value1 = dplyr::if_else(dplyr::coalesce(!is.na(value1), FALSE), trunc(value1), NA_real_)) 
data = data %>%
  dplyr::mutate(int_value1 = dplyr::if_else(dplyr::coalesce(!is.na(value1), FALSE), trunc(value1), NA_real_))

 5 do:  generate rounded_value1 = round(value1, 0.1) if !missing(value1)
 5 r:  data = data %>%
  dplyr::mutate(rounded_value1 = dplyr::if_else(dplyr::coalesce(!is.na(value1), FALSE), sfun_stata_round(value1,  0.1), NA_real_)) 
data = data %>%
  dplyr::mutate(rounded_value1 = dplyr::if_else(dplyr::coalesce(!is.na(value1), FALSE), sfun_stata_round(value1,  0.1), NA_real_))

 6 do:  generate random_uniform_draw = runiform()
 6 r:  data = data %>%
  dplyr::mutate(random_uniform_draw = stats::runif(as.numeric(dplyr::n()))) 
data = data %>%
  dplyr::mutate(random_uniform_draw = stats::runif(as.numeric(dplyr::n())))

 7 do:  generate id_plus_value2 = id + value2 if value2 < 7 & !missing(value2)
 7 r:  data = data %>%
  dplyr::mutate(id_plus_value2 = dplyr::if_else(dplyr::coalesce(value2 < 7 & !is.na(value2), FALSE), sfun_stata_add(id, value2), NA_real_)) 
data = data %>%
  dplyr::mutate(id_plus_value2 = dplyr::if_else(dplyr::coalesce(value2 < 7 & !is.na(value2), FALSE), sfun_stata_add(id, value2), NA_real_))

 8 do:  replace value1_log = 0 if missing(value1_log) & !missing(value1)
 8 r:  data = data %>%
  dplyr::mutate(value1_log = dplyr::if_else(dplyr::coalesce(is.na(value1_log) & !is.na(value1), FALSE), 0, data$value1_log)) 
data = data %>%
  dplyr::mutate(value1_log = dplyr::if_else(dplyr::coalesce(is.na(value1_log) & !is.na(value1), FALSE), 0, data$value1_log))

 9 do:  replace value1 = value1 * 1.5 if group_orig == "Alpha" & !missing(value1) & !missing(group_orig)
 9 r:  data = data %>%
  dplyr::mutate(value1 = dplyr::if_else(dplyr::coalesce(group_orig == "Alpha" & !is.na(value1) & !is.na(group_orig), FALSE), value1 * 1.5, data$value1)) 
data = data %>%
  dplyr::mutate(value1 = dplyr::if_else(dplyr::coalesce(group_orig == "Alpha" & !is.na(value1) & !is.na(group_orig), FALSE), value1 * 1.5, data$value1))

 10 do:  gen group_clean = strtrim(stritrim(lower(group_orig)))
 10 r:  data = data %>%
  dplyr::mutate(group_clean = stringi::stri_trim_both(sfun_stritrim(stringi::stri_trans_tolower(group_orig)))) 
data = data %>%
  dplyr::mutate(group_clean = stringi::stri_trim_both(sfun_stritrim(stringi::stri_trans_tolower(group_orig))))

 11 do:  replace group_clean = "unknown" if missing(group_clean)
 11 r:  data = data %>%
  dplyr::mutate(group_clean = dplyr::if_else(dplyr::coalesce(is.na(group_clean), FALSE), "unknown", data$group_clean)) 
data = data %>%
  dplyr::mutate(group_clean = dplyr::if_else(dplyr::coalesce(is.na(group_clean), FALSE), "unknown", data$group_clean))

 12 do:  gen group_abbr = substr(group_clean, 1, 3) if group_clean != "unknown"
 12 r:  data = data %>%
  dplyr::mutate(group_abbr = dplyr::if_else(dplyr::coalesce(group_clean != "unknown", FALSE), stringi::stri_sub(group_clean, from =  1, length =  3), NA_character_)) 
data = data %>%
  dplyr::mutate(group_abbr = dplyr::if_else(dplyr::coalesce(group_clean != "unknown", FALSE), stringi::stri_sub(group_clean, from =  1, length =  3), NA_character_))

 13 do:  gen contact_info = group_clean + ":" + num_str
 13 r:  data = data %>%
  dplyr::mutate(contact_info = sfun_stata_add(sfun_stata_add(group_clean, ":"), num_str)) 
data = data %>%
  dplyr::mutate(contact_info = sfun_stata_add(sfun_stata_add(group_clean, ":"), num_str))

 14 do:  gen str_len_group = strlen(group_clean)
 14 r:  data = data %>%
  dplyr::mutate(str_len_group = stringi::stri_length(group_clean)) 
data = data %>%
  dplyr::mutate(str_len_group = stringi::stri_length(group_clean))

 15 do:  replace contact_info = subinstr(contact_info, "beta", "delta", 1) if strpos(contact_info, "beta") > 0
 15 r:  data = data %>%
  dplyr::mutate(contact_info = dplyr::if_else(dplyr::coalesce(sfun_strpos(contact_info,  "beta") > 0, FALSE), sfun_subinstr(contact_info,  "beta",  "delta",  1), data$contact_info)) 
data = data %>%
  dplyr::mutate(contact_info = dplyr::if_else(dplyr::coalesce(sfun_strpos(contact_info,  "beta") > 0, FALSE), sfun_subinstr(contact_info,  "beta",  "delta",  1), data$contact_info))

 16 do:  egen mean_overall_value1 = mean(value1)
 16 r:  data = data %>%
  dplyr::mutate(
mean_overall_value1 = mean(value1, na.rm = TRUE)
) 
data = data %>%
  dplyr::mutate(
mean_overall_value1 = mean(value1, na.rm = TRUE)
)

 17 do:  egen sd_overall_value1 = sd(value1)
 17 r:  data = data %>%
  dplyr::mutate(
sd_overall_value1 = stats::sd(value1, na.rm = TRUE)
) 
data = data %>%
  dplyr::mutate(
sd_overall_value1 = stats::sd(value1, na.rm = TRUE)
)

 18 do:  egen total_value2_by_group = total(value2), by(group_clean)
 18 r:  data = data %>%
  dplyr::group_by(dplyr::across(c("group_clean"))) %>%
  dplyr::mutate(
total_value2_by_group = sum(value2, na.rm = TRUE)
) %>%
  dplyr::ungroup() 
data = data %>%
  dplyr::group_by(dplyr::across(c("group_clean"))) %>%
  dplyr::mutate(
total_value2_by_group = sum(value2, na.rm = TRUE)
) %>%
  dplyr::ungroup()

 19 do:  egen median_value1_by_group = median(value1), by(group_clean)
 19 r:  data = data %>%
  dplyr::group_by(dplyr::across(c("group_clean"))) %>%
  dplyr::mutate(
median_value1_by_group = stats::median(value1, na.rm = TRUE)
) %>%
  dplyr::ungroup() 
data = data %>%
  dplyr::group_by(dplyr::across(c("group_clean"))) %>%
  dplyr::mutate(
median_value1_by_group = stats::median(value1, na.rm = TRUE)
) %>%
  dplyr::ungroup()

 20 do:  egen group_numeric_id = group(group_clean)
 20 r:  data = data %>%
  dplyr::arrange(dplyr::across(c("group_clean"))) %>%
  dplyr::group_by(dplyr::across(c("group_clean"))) %>%
  dplyr::mutate(
group_numeric_id = dplyr::cur_group_id()
) %>%
  dplyr::ungroup() %>%
  dplyr::arrange(stata2r_original_order_idx) 
data = data %>%
  dplyr::arrange(dplyr::across(c("group_clean"))) %>%
  dplyr::group_by(dplyr::across(c("group_clean"))) %>%
  dplyr::mutate(
group_numeric_id = dplyr::cur_group_id()
) %>%
  dplyr::ungroup() %>%
  dplyr::arrange(stata2r_original_order_idx)

 21 do:  egen tag_first_in_group = tag(group_clean)
 21 r:  data = data %>%
  dplyr::arrange(dplyr::across(c("group_clean"))) %>%
  dplyr::group_by(dplyr::across(c("group_clean"))) %>%
  dplyr::mutate(
tag_first_in_group = as.integer(dplyr::row_number() == 1)
) %>%
  dplyr::ungroup() %>%
  dplyr::arrange(stata2r_original_order_idx) 
data = data %>%
  dplyr::arrange(dplyr::across(c("group_clean"))) %>%
  dplyr::group_by(dplyr::across(c("group_clean"))) %>%
  dplyr::mutate(
tag_first_in_group = as.integer(dplyr::row_number() == 1)
) %>%
  dplyr::ungroup() %>%
  dplyr::arrange(stata2r_original_order_idx)

 22 do:  egen count_obs_in_group = count(id), by(group_clean)
 22 r:  data = data %>%
  dplyr::group_by(dplyr::across(c("group_clean"))) %>%
  dplyr::mutate(
count_obs_in_group = sum(!is.na(id))
) %>%
  dplyr::ungroup() 
data = data %>%
  dplyr::group_by(dplyr::across(c("group_clean"))) %>%
  dplyr::mutate(
count_obs_in_group = sum(!is.na(id))
) %>%
  dplyr::ungroup()

 23 do:  egen rank_value1_in_group = rank(value1), by(group_clean) fieldstrustmissings
 23 r:  data = data %>%
  dplyr::group_by(dplyr::across(c("group_clean"))) %>%
  dplyr::mutate(
rank_value1_in_group = dplyr::min_rank(value1, na.last = "bottom")
) %>%
  dplyr::ungroup()
 # Other options ignored: fieldstrustmissings 
data = data %>%
  dplyr::group_by(dplyr::across(c("group_clean"))) %>%
  dplyr::mutate(
rank_value1_in_group = dplyr::min_rank(value1, na.last = "bottom")
) %>%
  dplyr::ungroup()

Error: Problem with `mutate()` column `rank_value1_in_group`.
ℹ `rank_value1_in_group = dplyr::min_rank(value1, na.last = "bottom")`.
✖ unused argument (na.last = "bottom")
ℹ The error occurred in group 1: group_clean = "alpha".
Caused by error in `dplyr::min_rank()`:
! unused argument (na.last = "bottom")
 # Other options ignored: fieldstrustmissings

Error executing R code for Stata line  23 :  data = data %>%
  dplyr::group_by(dplyr::across(c("group_clean"))) %>%
  dplyr::mutate(
rank_value1_in_group = dplyr::min_rank(value1, na.last = "bottom")
) %>%
  dplyr::ungroup()

Error: Problem with `mutate()` column `rank_value1_in_group`.
ℹ `rank_value1_in_group = dplyr::min_rank(value1, na.last = "bottom")`.
✖ unused argument (na.last = "bottom")
ℹ The error occurred in group 1: group_clean = "alpha".
Caused by error in `dplyr::min_rank()`:
! unused argument (na.last = "bottom")
 # Other options ignored: fieldstrustmissings
 
