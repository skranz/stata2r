In total 1 of 3 tests failed.


---
Outcome of test 'source_r': ok
All R files could be sourced.



---
Outcome of test 'do1': ok


Details:

cmd_df = do_parse(do_code)
cmd_df = mark_data_manip_cmd(cmd_df)

str(cmd_df)
'data.frame':	38 obs. of  10 variables:
 $ line                   : int  1 2 3 4 5 6 7 8 9 10 ...
 $ do_code                : chr  "use \"data.dta\", clear" "sort group i" "keep in 1/39" "list in 1/5" ...
 $ stata_cmd_original     : chr  "use" "sort" "keep" "list" ...
 $ stata_cmd              : chr  "use" "sort" "keep" "list" ...
 $ rest_of_cmd            : chr  "\"data.dta\", clear" "group i" "in 1/39" "in 1/5" ...
 $ is_by_prefix           : logi  FALSE FALSE FALSE FALSE FALSE TRUE ...
 $ by_group_vars          : chr  NA NA NA NA ...
 $ by_sort_vars           : chr  NA NA NA NA ...
 $ stata_translation_error: chr  NA NA NA NA ...
 $ do_translate           : logi  TRUE TRUE TRUE FALSE FALSE TRUE ...
NULL

---
#Translate Stata to R commands... ... translation done.
---
# Run translated R commands and compare results


 1 do:  use "data.dta", clear
 1 r:  data = haven::read_dta(file.path(stata2r_env$working_dir, "data.dta")) %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used 
data = haven::read_dta(file.path(stata2r_env$working_dir, "data.dta")) %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used

 2 do:  sort group i
 2 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group", "i"))) 
data = dplyr::arrange(data, !!!dplyr::syms(c("group", "i")))

 3 do:  keep in 1/39
 3 r:  data = dplyr::slice(data, 1:39) 
data = dplyr::slice(data, 1:39)

 4 do:  list in 1/5 

 4 r:  not translated since not flagged as data manipulation

 5 do:  display _n 

 5 r:  not translated since not flagged as data manipulation

 6 do:  by group: gen seq = _n
 6 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group")))
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`seq` = as.numeric(dplyr::row_number())) %>% 
  dplyr::ungroup() 
data = dplyr::arrange(data, !!!dplyr::syms(c("group")))

data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`seq` = as.numeric(dplyr::row_number())) %>% 
  dplyr::ungroup()

 7 do:  gen logi = log(i)
 7 r:  data = data %>% 
  dplyr::mutate(`logi` = log(i)) 
data = data %>% 
  dplyr::mutate(`logi` = log(i))

 8 do:  gen sqrt_i = sqrt(i)
 8 r:  data = data %>% 
  dplyr::mutate(`sqrt_i` = sqrt(i)) 
data = data %>% 
  dplyr::mutate(`sqrt_i` = sqrt(i))

 9 do:  gen group_num = cond(group=="A",1,cond(group=="B",2,3))
 9 r:  data = data %>% 
  dplyr::mutate(`group_num` = as.numeric(dplyr::if_else(group=="A", 1, dplyr::if_else(group=="B", 2, 3)))) 
data = data %>% 
  dplyr::mutate(`group_num` = as.numeric(dplyr::if_else(group=="A", 1, dplyr::if_else(group=="B", 2, 3))))

 10 do:  egen mean_i_grp = mean(i), by(group)
 10 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`mean_i_grp` = mean(i, na.rm = TRUE)) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`mean_i_grp` = mean(i, na.rm = TRUE)) %>% 
  dplyr::ungroup()

 11 do:  egen total_i = total(i)
 11 r:  data = data %>% 
  dplyr::mutate(`total_i` = sum(i, na.rm = TRUE)) 
data = data %>% 
  dplyr::mutate(`total_i` = sum(i, na.rm = TRUE))

 12 do:  bysort group: egen rank_i = rank(i)
 12 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group")))
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`rank_i` = as.numeric(base::rank(i, ties.method = 'average', na.last = 'keep'))) %>% 
  dplyr::ungroup() 
data = dplyr::arrange(data, !!!dplyr::syms(c("group")))

data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`rank_i` = as.numeric(base::rank(i, ties.method = 'average', na.last = 'keep'))) %>% 
  dplyr::ungroup()

 13 do:  gen flag = (i>20) if group=="A"
 13 r:  data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else(dplyr::coalesce(group=="A", FALSE), as.numeric((i>20)), NA_real_)) 
data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else(dplyr::coalesce(group=="A", FALSE), as.numeric((i>20)), NA_real_))

 14 do:  replace flag = 0 if missing(flag)
 14 r:  data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else(dplyr::coalesce(is.na(flag), FALSE), 0, data$`flag`)) 
data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else(dplyr::coalesce(is.na(flag), FALSE), 0, data$`flag`))

 15 do:  keep if flag==1 | group=="B"
 15 r:  data = dplyr::filter(data, flag==1 | group=="B") 
data = dplyr::filter(data, flag==1 | group=="B")

 16 do:  drop if i>35
 16 r:  data = dplyr::filter(data, !(i>35)) 
data = dplyr::filter(data, !(i>35))

 17 do:  collapse (mean) i (sum) total_i_sum = i, by(group)
 17 r:  data = data %>% 
  collapse::fgroup_by(group) %>% 
  collapse::fsummarise(`i` = collapse::fmean(i, na.rm = TRUE),
  `total_i_sum` = collapse::fsum(i, na.rm = TRUE)) %>% 
  collapse::fungroup() 
data = data %>% 
  collapse::fgroup_by(group) %>% 
  collapse::fsummarise(`i` = collapse::fmean(i, na.rm = TRUE),
  `total_i_sum` = collapse::fsum(i, na.rm = TRUE)) %>% 
  collapse::fungroup()

 18 do:  rename i mean_i_overall
 18 r:  data = collapse::frename(data, `i` = `mean_i_overall`) 
data = collapse::frename(data, `i` = `mean_i_overall`)

 19 do:  expand 2 if group=="C"
 19 r:  stata_tmp_expand_n_values_L19 = 2
stata_tmp_expand_cond_values_L19 = with(data, group=="C")
stata_tmp_final_expand_times_L19 = ifelse(!is.na(stata_tmp_expand_cond_values_L19) & stata_tmp_expand_cond_values_L19, ifelse(is.na(stata_tmp_expand_n_values_L19), 1, pmax(0, as.integer(stata_tmp_expand_n_values_L19))), 1)
stata_tmp_final_expand_times_L19 = ifelse(is.na(stata_tmp_final_expand_times_L19), 1, stata_tmp_final_expand_times_L19)
data = data[base::rep(1:NROW(data), times = stata_tmp_final_expand_times_L19), ]
if (exists('stata_tmp_expand_n_values_L19')) rm(stata_tmp_expand_n_values_L19, stata_tmp_expand_cond_values_L19, stata_tmp_final_expand_times_L19) 
stata_tmp_expand_n_values_L19 = 2

stata_tmp_expand_cond_values_L19 = with(data, group=="C")

stata_tmp_final_expand_times_L19 = ifelse(!is.na(stata_tmp_expand_cond_values_L19) & stata_tmp_expand_cond_values_L19, ifelse(is.na(stata_tmp_expand_n_values_L19), 1, pmax(0, as.integer(stata_tmp_expand_n_values_L19))), 1)

stata_tmp_final_expand_times_L19 = ifelse(is.na(stata_tmp_final_expand_times_L19), 1, stata_tmp_final_expand_times_L19)

data = data[base::rep(1:NROW(data), times = stata_tmp_final_expand_times_L19), ]

if (exists('stata_tmp_expand_n_values_L19')) rm(stata_tmp_expand_n_values_L19, stata_tmp_expand_cond_values_L19, stata_tmp_final_expand_times_L19)

 20 do:  duplicates drop
 20 r:  ## Calculate duplicate flag based on all variables
stata_tmp_is_duplicate_L20 = base::duplicated(data, fromLast = FALSE)
## Calculate condition flag
stata_tmp_satisfies_cond_L20 = TRUE
data = dplyr::filter(data, !(stata_tmp_is_duplicate_L20 & stata_tmp_satisfies_cond_L20))
rm(stata_tmp_is_duplicate_L20, stata_tmp_satisfies_cond_L20) 
## Calculate duplicate flag based on all variables

stata_tmp_is_duplicate_L20 = base::duplicated(data, fromLast = FALSE)

## Calculate condition flag

stata_tmp_satisfies_cond_L20 = TRUE

data = dplyr::filter(data, !(stata_tmp_is_duplicate_L20 & stata_tmp_satisfies_cond_L20))

rm(stata_tmp_is_duplicate_L20, stata_tmp_satisfies_cond_L20)

 21 do:  encode group, gen(group_code)
 21 r:  data = dplyr::mutate(data, `group_code` = haven::labelled(rep(NA_integer_, NROW(data)), labels = c()))
temp_source_vector_L21 = data[['group']]
temp_unique_labels_L21 = base::sort(base::unique(stats::na.omit(temp_source_vector_L21[temp_source_vector_L21 != ""])))
temp_numeric_values_L21 = base::match(temp_source_vector_L21, temp_unique_labels_L21)
temp_label_map_L21 = if (length(temp_unique_labels_L21) > 0) stats::setNames(seq_along(temp_unique_labels_L21), temp_unique_labels_L21) else stats::setNames(integer(0), character(0))
stata_tmp_encoded_full_L21 = haven::labelled(as.integer(temp_numeric_values_L21), labels = temp_label_map_L21)
rm(temp_source_vector_L21, temp_unique_labels_L21, temp_numeric_values_L21, temp_label_map_L21)
data[['group_code']] = stata_tmp_encoded_full_L21
rm(stata_tmp_encoded_full_L21) 
data = dplyr::mutate(data, `group_code` = haven::labelled(rep(NA_integer_, NROW(data)), labels = c()))

temp_source_vector_L21 = data[['group']]

temp_unique_labels_L21 = base::sort(base::unique(stats::na.omit(temp_source_vector_L21[temp_source_vector_L21 != ""])))

temp_numeric_values_L21 = base::match(temp_source_vector_L21, temp_unique_labels_L21)

temp_label_map_L21 = if (length(temp_unique_labels_L21) > 0) stats::setNames(seq_along(temp_unique_labels_L21), temp_unique_labels_L21) else stats::setNames(integer(0), character(0))

stata_tmp_encoded_full_L21 = haven::labelled(as.integer(temp_numeric_values_L21), labels = temp_label_map_L21)

rm(temp_source_vector_L21, temp_unique_labels_L21, temp_numeric_values_L21, temp_label_map_L21)

data[['group_code']] = stata_tmp_encoded_full_L21

rm(stata_tmp_encoded_full_L21)

 22 do:  decode group_code, gen(group_str)
 22 r:  data = dplyr::mutate(data, `group_str` = NA_character_)
## Decode values using haven::as_factor
stata_tmp_decoded_values_L22 = with(data, as.character(haven::as_factor(data$`group_code`, levels = 'labels')))
data = dplyr::mutate(data, `group_str` = stata_tmp_decoded_values_L22)
rm(stata_tmp_decoded_values_L22) 
data = dplyr::mutate(data, `group_str` = NA_character_)

## Decode values using haven::as_factor

stata_tmp_decoded_values_L22 = with(data, as.character(haven::as_factor(data$`group_code`, levels = 'labels')))

data = dplyr::mutate(data, `group_str` = stata_tmp_decoded_values_L22)

rm(stata_tmp_decoded_values_L22)

 23 do:  sort group_code
 23 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group_code"))) 
data = dplyr::arrange(data, !!!dplyr::syms(c("group_code")))

 24 do:  tempfile t1
 24 r:  R_tempfile_L24_t1_path = tempfile(fileext = '.dta') # Stata tempfile 't1' 
R_tempfile_L24_t1_path = tempfile(fileext = '.dta') # Stata tempfile 't1'

 25 do:  save "`t1'"
 25 r:  haven::write_dta(data, path = R_tempfile_L24_t1_path) 
haven::write_dta(data, path = R_tempfile_L24_t1_path)

 26 do:  keep if group_code==1
 26 r:  data = dplyr::filter(data, group_code==1) 
data = dplyr::filter(data, group_code==1)

 27 do:  merge 1:m group_code using "`t1'", keep(match master) nogenerate
 27 r:  stata_tmp_using_data_L27 = haven::read_dta(R_tempfile_L24_t1_path)
common_cols = intersect(names(data), names(stata_tmp_using_data_L27))
common_cols_not_by = setdiff(common_cols, c("group_code"))
if (length(common_cols_not_by) > 0) { stata_tmp_using_data_L27 = dplyr::select(stata_tmp_using_data_L27, -dplyr::all_of(common_cols_not_by)) }
data = dplyr::left_join(data, stata_tmp_using_data_L27, by = c("group_code"), indicator = "_merge_status_tmp_L27")
 # _merge variable was not generated due to 'nogenerate' option.
data = dplyr::select(data, -dplyr::any_of('_merge_status_tmp_L27'))
rm(stata_tmp_using_data_L27, common_cols, common_cols_not_by)
# Stata merge type: 1:m, keep(master), nogenerate 
stata_tmp_using_data_L27 = haven::read_dta(R_tempfile_L24_t1_path)

common_cols = intersect(names(data), names(stata_tmp_using_data_L27))

common_cols_not_by = setdiff(common_cols, c("group_code"))

if (length(common_cols_not_by) > 0) { stata_tmp_using_data_L27 = dplyr::select(stata_tmp_using_data_L27, -dplyr::all_of(common_cols_not_by)) }

data = dplyr::left_join(data, stata_tmp_using_data_L27, by = c("group_code"), indicator = "_merge_status_tmp_L27")

 # _merge variable was not generated due to 'nogenerate' option.

data = dplyr::select(data, -dplyr::any_of('_merge_status_tmp_L27'))

rm(stata_tmp_using_data_L27, common_cols, common_cols_not_by)

# Stata merge type: 1:m, keep(master), nogenerate

 28 do:  append using "`t1'"
 28 r:  data = dplyr::bind_rows(data, haven::read_dta(R_tempfile_L24_t1_path)) 
data = dplyr::bind_rows(data, haven::read_dta(R_tempfile_L24_t1_path))

 29 do:  gen id = _n
 29 r:  data = data %>% 
  dplyr::mutate(`id` = as.numeric(dplyr::row_number())) 
data = data %>% 
  dplyr::mutate(`id` = as.numeric(dplyr::row_number()))

 30 do:  bysort group_code (mean_i_overall): gen diff_mean = mean_i_overall - mean_i_overall[_n-1]
 30 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group_code", "mean_i_overall")))
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_code"))) %>% 
  dplyr::mutate(`diff_mean` = mean_i_overall - dplyr::lag(mean_i_overall, n = 1)) %>% 
  dplyr::ungroup() 
data = dplyr::arrange(data, !!!dplyr::syms(c("group_code", "mean_i_overall")))

data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_code"))) %>% 
  dplyr::mutate(`diff_mean` = mean_i_overall - dplyr::lag(mean_i_overall, n = 1)) %>% 
  dplyr::ungroup()

 31 do:  recode group_code (1=10)(2=20)(3=30)
 31 r:  data = dplyr::mutate(data, `group_code` = dplyr::case_when(
    group_code %in% c(1) ~ 10,
    group_code %in% c(2) ~ 20,
    group_code %in% c(3) ~ 30
  )) 
data = dplyr::mutate(data, `group_code` = dplyr::case_when(
    group_code %in% c(1) ~ 10,
    group_code %in% c(2) ~ 20,
    group_code %in% c(3) ~ 30
  ))

 32 do:  drop if missing(mean_i_overall)
 32 r:  data = dplyr::filter(data, !(is.na(mean_i_overall))) 
data = dplyr::filter(data, !(is.na(mean_i_overall)))

 33 do:  order id group_code mean_i_overall
 33 r:  data = dplyr::select(data, id, group_code, mean_i_overall, dplyr::everything()) 
data = dplyr::select(data, id, group_code, mean_i_overall, dplyr::everything())

 34 do:  collapse (sum) sum_mean = mean_i_overall, by(group_code)
 34 r:  data = data %>% 
  collapse::fgroup_by(group_code) %>% 
  collapse::fsummarise(`sum_mean` = collapse::fsum(mean_i_overall, na.rm = TRUE)) %>% 
  collapse::fungroup() 
data = data %>% 
  collapse::fgroup_by(group_code) %>% 
  collapse::fsummarise(`sum_mean` = collapse::fsum(mean_i_overall, na.rm = TRUE)) %>% 
  collapse::fungroup()

 35 do:  egen total_sum = total(sum_mean)
 35 r:  data = data %>% 
  dplyr::mutate(`total_sum` = sum(sum_mean, na.rm = TRUE)) 
data = data %>% 
  dplyr::mutate(`total_sum` = sum(sum_mean, na.rm = TRUE))

 36 do:  gen proportion = sum_mean/total_sum
 36 r:  data = data %>% 
  dplyr::mutate(`proportion` = sum_mean/total_sum) 
data = data %>% 
  dplyr::mutate(`proportion` = sum_mean/total_sum)

 37 do:  sort proportion
 37 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("proportion"))) 
data = dplyr::arrange(data, !!!dplyr::syms(c("proportion")))

 38 do:  save "result_data.dta", replace
 38 r:  haven::write_dta(data, path = file.path(stata2r_env$working_dir, "result_data.dta")) # Options ignored: replace 
haven::write_dta(data, path = file.path(stata2r_env$working_dir, "result_data.dta")) # Options ignored: replace


---
Outcome of test 'do2': not ok


Details:

cmd_df = do_parse(do_code)
cmd_df = mark_data_manip_cmd(cmd_df)

str(cmd_df)
'data.frame':	82 obs. of  10 variables:
 $ line                   : int  1 2 3 4 5 6 7 8 9 10 ...
 $ do_code                : chr  "use \"test_data.dta\", clear" "generate value1_log = log(value1)" "generate value2_squared = value2^2" "generate int_value1 = int(value1) if !missing(value1)" ...
 $ stata_cmd_original     : chr  "use" "generate" "generate" "generate" ...
 $ stata_cmd              : chr  "use" "generate" "generate" "generate" ...
 $ rest_of_cmd            : chr  "\"test_data.dta\", clear" "value1_log = log(value1)" "value2_squared = value2^2" "int_value1 = int(value1) if !missing(value1)" ...
 $ is_by_prefix           : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...
 $ by_group_vars          : chr  NA NA NA NA ...
 $ by_sort_vars           : chr  NA NA NA NA ...
 $ stata_translation_error: chr  NA NA NA NA ...
 $ do_translate           : logi  TRUE TRUE TRUE TRUE TRUE TRUE ...
NULL

---
#Translate Stata to R commands... ... translation done.
---
# Run translated R commands and compare results


 1 do:  use "test_data.dta", clear
 1 r:  data = haven::read_dta(file.path(stata2r_env$working_dir, "test_data.dta")) %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used 
data = haven::read_dta(file.path(stata2r_env$working_dir, "test_data.dta")) %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used

 2 do:  generate value1_log = log(value1)
 2 r:  data = data %>% 
  dplyr::mutate(`value1_log` = log(value1)) 
data = data %>% 
  dplyr::mutate(`value1_log` = log(value1))

 3 do:  generate value2_squared = value2^2
 3 r:  data = data %>% 
  dplyr::mutate(`value2_squared` = value2^2) 
data = data %>% 
  dplyr::mutate(`value2_squared` = value2^2)

 4 do:  generate int_value1 = int(value1) if !missing(value1)
 4 r:  data = data %>% 
  dplyr::mutate(`int_value1` = dplyr::if_else(dplyr::coalesce(!is.na(value1), FALSE), trunc(value1), NA_real_)) 
data = data %>% 
  dplyr::mutate(`int_value1` = dplyr::if_else(dplyr::coalesce(!is.na(value1), FALSE), trunc(value1), NA_real_))

 5 do:  generate rounded_value1 = round(value1, 0.1) if !missing(value1)
 5 r:  data = data %>% 
  dplyr::mutate(`rounded_value1` = dplyr::if_else(dplyr::coalesce(!is.na(value1), FALSE), sfun_stata_round(value1,  0.1), NA_real_)) 
data = data %>% 
  dplyr::mutate(`rounded_value1` = dplyr::if_else(dplyr::coalesce(!is.na(value1), FALSE), sfun_stata_round(value1,  0.1), NA_real_))

 6 do:  generate random_uniform_draw = runiform()
 6 r:  data = data %>% 
  dplyr::mutate(`random_uniform_draw` = stats::runif(as.numeric(dplyr::n()))) 
data = data %>% 
  dplyr::mutate(`random_uniform_draw` = stats::runif(as.numeric(dplyr::n())))

 7 do:  generate id_plus_value2 = id + value2 if value2 < 7 & !missing(value2)
 7 r:  data = data %>% 
  dplyr::mutate(`id_plus_value2` = dplyr::if_else(dplyr::coalesce(value2 < 7 & !is.na(value2), FALSE), sfun_stata_add(id, value2), NA_real_)) 
data = data %>% 
  dplyr::mutate(`id_plus_value2` = dplyr::if_else(dplyr::coalesce(value2 < 7 & !is.na(value2), FALSE), sfun_stata_add(id, value2), NA_real_))

 8 do:  replace value1_log = 0 if missing(value1_log) & !missing(value1)
 8 r:  data = data %>% 
  dplyr::mutate(`value1_log` = dplyr::if_else(dplyr::coalesce(is.na(value1_log) & !is.na(value1), FALSE), 0, data$`value1_log`)) 
data = data %>% 
  dplyr::mutate(`value1_log` = dplyr::if_else(dplyr::coalesce(is.na(value1_log) & !is.na(value1), FALSE), 0, data$`value1_log`))

 9 do:  replace value1 = value1 * 1.5 if group_orig == "Alpha" & !missing(value1) & !missing(group_orig)
 9 r:  data = data %>% 
  dplyr::mutate(`value1` = dplyr::if_else(dplyr::coalesce(group_orig == "Alpha" & !is.na(value1) & !is.na(group_orig), FALSE), value1 * 1.5, data$`value1`)) 
data = data %>% 
  dplyr::mutate(`value1` = dplyr::if_else(dplyr::coalesce(group_orig == "Alpha" & !is.na(value1) & !is.na(group_orig), FALSE), value1 * 1.5, data$`value1`))

 10 do:  gen group_clean = strtrim(stritrim(lower(group_orig)))
 10 r:  data = data %>% 
  dplyr::mutate(`group_clean` = stringi::stri_trim_both(sfun_stritrim(stringi::stri_trans_tolower(group_orig)))) 
data = data %>% 
  dplyr::mutate(`group_clean` = stringi::stri_trim_both(sfun_stritrim(stringi::stri_trans_tolower(group_orig))))

 11 do:  replace group_clean = "unknown" if missing(group_clean)
 11 r:  data = data %>% 
  dplyr::mutate(`group_clean` = dplyr::if_else(dplyr::coalesce(is.na(group_clean), FALSE), "unknown", data$`group_clean`)) 
data = data %>% 
  dplyr::mutate(`group_clean` = dplyr::if_else(dplyr::coalesce(is.na(group_clean), FALSE), "unknown", data$`group_clean`))

 12 do:  gen group_abbr = substr(group_clean, 1, 3) if group_clean != "unknown"
 12 r:  data = data %>% 
  dplyr::mutate(`group_abbr` = dplyr::if_else(dplyr::coalesce(group_clean != "unknown", FALSE), stringi::stri_sub(group_clean, from =  1, length =  3), NA_character_)) 
data = data %>% 
  dplyr::mutate(`group_abbr` = dplyr::if_else(dplyr::coalesce(group_clean != "unknown", FALSE), stringi::stri_sub(group_clean, from =  1, length =  3), NA_character_))

 13 do:  gen contact_info = group_clean + ":" + num_str
 13 r:  data = data %>% 
  dplyr::mutate(`contact_info` = sfun_stata_add(sfun_stata_add(group_clean, ":"), num_str)) 
data = data %>% 
  dplyr::mutate(`contact_info` = sfun_stata_add(sfun_stata_add(group_clean, ":"), num_str))

 14 do:  gen str_len_group = strlen(group_clean)
 14 r:  data = data %>% 
  dplyr::mutate(`str_len_group` = stringi::stri_length(group_clean)) 
data = data %>% 
  dplyr::mutate(`str_len_group` = stringi::stri_length(group_clean))

 15 do:  replace contact_info = subinstr(contact_info, "beta", "delta", 1) if strpos(contact_info, "beta") > 0
 15 r:  data = data %>% 
  dplyr::mutate(`contact_info` = dplyr::if_else(dplyr::coalesce(sfun_strpos(contact_info,  "beta") > 0, FALSE), sfun_subinstr(contact_info,  "beta",  "delta",  1), data$`contact_info`)) 
data = data %>% 
  dplyr::mutate(`contact_info` = dplyr::if_else(dplyr::coalesce(sfun_strpos(contact_info,  "beta") > 0, FALSE), sfun_subinstr(contact_info,  "beta",  "delta",  1), data$`contact_info`))

 16 do:  egen mean_overall_value1 = mean(value1)
 16 r:  data = data %>% 
  dplyr::mutate(`mean_overall_value1` = mean(value1, na.rm = TRUE)) 
data = data %>% 
  dplyr::mutate(`mean_overall_value1` = mean(value1, na.rm = TRUE))

 17 do:  egen sd_overall_value1 = sd(value1)
 17 r:  data = data %>% 
  dplyr::mutate(`sd_overall_value1` = stats::sd(value1, na.rm = TRUE)) 
data = data %>% 
  dplyr::mutate(`sd_overall_value1` = stats::sd(value1, na.rm = TRUE))

 18 do:  egen total_value2_by_group = total(value2), by(group_clean)
 18 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`total_value2_by_group` = sum(value2, na.rm = TRUE)) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`total_value2_by_group` = sum(value2, na.rm = TRUE)) %>% 
  dplyr::ungroup()

 19 do:  egen median_value1_by_group = median(value1), by(group_clean)
 19 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`median_value1_by_group` = stats::median(value1, na.rm = TRUE)) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`median_value1_by_group` = stats::median(value1, na.rm = TRUE)) %>% 
  dplyr::ungroup()

 20 do:  egen group_numeric_id = group(group_clean)
 20 r:  data = data %>% 
  dplyr::arrange(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`group_numeric_id` = dplyr::cur_group_id()) %>% 
  dplyr::ungroup() %>% 
  dplyr::arrange(stata2r_original_order_idx) 
data = data %>% 
  dplyr::arrange(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`group_numeric_id` = dplyr::cur_group_id()) %>% 
  dplyr::ungroup() %>% 
  dplyr::arrange(stata2r_original_order_idx)

 21 do:  egen tag_first_in_group = tag(group_clean)
 21 r:  data = data %>% 
  dplyr::arrange(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`tag_first_in_group` = as.numeric(dplyr::row_number() == 1)) %>% 
  dplyr::ungroup() %>% 
  dplyr::arrange(stata2r_original_order_idx) 
data = data %>% 
  dplyr::arrange(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`tag_first_in_group` = as.numeric(dplyr::row_number() == 1)) %>% 
  dplyr::ungroup() %>% 
  dplyr::arrange(stata2r_original_order_idx)

 22 do:  egen count_obs_in_group = count(id), by(group_clean)
 22 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`count_obs_in_group` = sum(!is.na(id))) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`count_obs_in_group` = sum(!is.na(id))) %>% 
  dplyr::ungroup()

 23 do:  egen rank_value1_in_group = rank(value1), by(group_clean) fieldstrustmissings
 23 r:  data = data %>% 
  dplyr::arrange(!!!dplyr::syms(c("group_clean", "value1"))) %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`rank_value1_in_group` = as.numeric(base::rank(as.numeric(dplyr::if_else(is.na(value1), Inf, value1)), ties.method = 'average', na.last = 'keep'))) %>% 
  dplyr::ungroup() %>% 
  dplyr::arrange(stata2r_original_order_idx) 
data = data %>% 
  dplyr::arrange(!!!dplyr::syms(c("group_clean", "value1"))) %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`rank_value1_in_group` = as.numeric(base::rank(as.numeric(dplyr::if_else(is.na(value1), Inf, value1)), ties.method = 'average', na.last = 'keep'))) %>% 
  dplyr::ungroup() %>% 
  dplyr::arrange(stata2r_original_order_idx)

 24 do:  egen row_total_v1_v2 = rowtotal(value1 value2)
 24 r:  data = data %>% 
  dplyr::mutate(`row_total_v1_v2` = base::rowSums(collapse::fnafill(dplyr::select(dplyr::cur_data_all(), dplyr::all_of(c('value1','value2'))), fill = 0), na.rm = FALSE)) 
data = data %>% 
  dplyr::mutate(`row_total_v1_v2` = base::rowSums(collapse::fnafill(dplyr::select(dplyr::cur_data_all(), dplyr::all_of(c('value1','value2'))), fill = 0), na.rm = FALSE))

Error: Problem with `mutate()` column `row_total_v1_v2`.
ℹ `row_total_v1_v2 = base::rowSums(...)`.
✖ 'fnafill' is not an exported object from 'namespace:collapse'
Caused by error:
! 'fnafill' is not an exported object from 'namespace:collapse'
Error executing R code for Stata line  24 :  data = data %>% 
  dplyr::mutate(`row_total_v1_v2` = base::rowSums(collapse::fnafill(dplyr::select(dplyr::cur_data_all(), dplyr::all_of(c('value1','value2'))), fill = 0), na.rm = FALSE))

Error: Problem with `mutate()` column `row_total_v1_v2`.
ℹ `row_total_v1_v2 = base::rowSums(...)`.
✖ 'fnafill' is not an exported object from 'namespace:collapse'
Caused by error:
! 'fnafill' is not an exported object from 'namespace:collapse' 
