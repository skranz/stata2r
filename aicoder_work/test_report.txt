In total 1 of 2 tests failed.


---
Outcome of test 'source_r': ok
All R files could be sourced.



---
Outcome of test 'do1': not ok


Details:

cmd_df = do_parse(do_code)
cmd_df = mark_data_manip_cmd(cmd_df)

str(cmd_df)
'data.frame':	38 obs. of  9 variables:
 $ line              : int  1 2 3 4 5 6 7 8 9 10 ...
 $ do_code           : chr  "use \"data.dta\", clear" "sort group i" "keep in 1/39" "list in 1/5" ...
 $ stata_cmd_original: chr  "use" "sort" "keep" "list" ...
 $ stata_cmd         : chr  "use" "sort" "keep" "list" ...
 $ rest_of_cmd       : chr  "\"data.dta\", clear" "group i" "in 1/39" "in 1/5" ...
 $ is_by_prefix      : logi  FALSE FALSE FALSE FALSE FALSE TRUE ...
 $ by_group_vars     : chr  NA NA NA NA ...
 $ by_sort_vars      : chr  NA NA NA NA ...
 $ do_translate      : logi  TRUE TRUE TRUE FALSE FALSE TRUE ...
NULL

---
#Translate Stata to R commands... ... translation done.
---
# Run translated R commands and compare results


 1 do:  use "data.dta", clear
 1 r:  data = haven::read_dta(file.path(stata2r_env$working_dir, "data.dta")) # 'clear' was used 
data = haven::read_dta(file.path(stata2r_env$working_dir, "data.dta")) # 'clear' was used

 2 do:  sort group i
 2 r:  data = dplyr::arrange(data, group, i) 
data = dplyr::arrange(data, group, i)

 3 do:  keep in 1/39
 3 r:  data = dplyr::slice(data, 1:39) 
data = dplyr::slice(data, 1:39)

 4 do:  list in 1/5 

 4 r:  not translated since not flagged as data manipulation

 5 do:  display _n 

 5 r:  not translated since not flagged as data manipulation

 6 do:  by group: gen seq = _n
 6 r:  data = data %>%
  dplyr::group_by(dplyr::across(c("group"))) %>%
  dplyr::mutate(seq = as.numeric(dplyr::row_number())) %>%
  dplyr::ungroup()
data$seq = sfun_strip_stata_attributes(data$seq) 
data = data %>%
  dplyr::group_by(dplyr::across(c("group"))) %>%
  dplyr::mutate(seq = as.numeric(dplyr::row_number())) %>%
  dplyr::ungroup()

data$seq = sfun_strip_stata_attributes(data$seq)

 7 do:  gen logi = log(i)
 7 r:  data = data %>%
  dplyr::mutate(logi = log(i))
data$logi = sfun_strip_stata_attributes(data$logi) 
data = data %>%
  dplyr::mutate(logi = log(i))

data$logi = sfun_strip_stata_attributes(data$logi)

 8 do:  gen sqrt_i = sqrt(i)
 8 r:  data = data %>%
  dplyr::mutate(sqrt_i = sqrt(i))
data$sqrt_i = sfun_strip_stata_attributes(data$sqrt_i) 
data = data %>%
  dplyr::mutate(sqrt_i = sqrt(i))

data$sqrt_i = sfun_strip_stata_attributes(data$sqrt_i)

 9 do:  gen group_num = cond(group=="A",1,cond(group=="B",2,3))
 9 r:  data = data %>%
  dplyr::mutate(group_num = as.numeric(dplyr::if_else(group=="A", 1, dplyr::if_else(group=="B", 2, 3))))
data$group_num = sfun_strip_stata_attributes(data$group_num) 
data = data %>%
  dplyr::mutate(group_num = as.numeric(dplyr::if_else(group=="A", 1, dplyr::if_else(group=="B", 2, 3))))

data$group_num = sfun_strip_stata_attributes(data$group_num)

 10 do:  egen mean_i_grp = mean(i), by(group)
 10 r:  data = data %>%
  dplyr::group_by(dplyr::across(
c("group")
)) %>%
  dplyr::mutate(
mean_i_grp = mean(i, na.rm = TRUE)
) %>%
  dplyr::ungroup()
data$mean_i_grp = sfun_strip_stata_attributes(data$mean_i_grp) 
data = data %>%
  dplyr::group_by(dplyr::across(
c("group")
)) %>%
  dplyr::mutate(
mean_i_grp = mean(i, na.rm = TRUE)
) %>%
  dplyr::ungroup()

data$mean_i_grp = sfun_strip_stata_attributes(data$mean_i_grp)

 11 do:  egen total_i = total(i)
 11 r:  data = data %>%
  dplyr::mutate(
total_i = sum(i, na.rm = TRUE)
)
data$total_i = sfun_strip_stata_attributes(data$total_i) 
data = data %>%
  dplyr::mutate(
total_i = sum(i, na.rm = TRUE)
)

data$total_i = sfun_strip_stata_attributes(data$total_i)

 12 do:  bysort group: egen rank_i = rank(i)
 12 r:  data = data %>%
  dplyr::group_by(dplyr::across(
c("group")
)) %>%
  dplyr::mutate(
rank_i = dplyr::min_rank(i)
) %>%
  dplyr::ungroup()
data$rank_i = sfun_strip_stata_attributes(data$rank_i) 
data = data %>%
  dplyr::group_by(dplyr::across(
c("group")
)) %>%
  dplyr::mutate(
rank_i = dplyr::min_rank(i)
) %>%
  dplyr::ungroup()

data$rank_i = sfun_strip_stata_attributes(data$rank_i)

 13 do:  gen flag = (i>20) if group=="A"
 13 r:  data = data %>%
  dplyr::mutate(flag = dplyr::if_else(group=="A", as.numeric((i>20)), NA_real_))
data$flag = sfun_strip_stata_attributes(data$flag) 
data = data %>%
  dplyr::mutate(flag = dplyr::if_else(group=="A", as.numeric((i>20)), NA_real_))

data$flag = sfun_strip_stata_attributes(data$flag)

 14 do:  replace flag = 0 if missing(flag)
 14 r:  data = data %>%
  dplyr::mutate(flag = dplyr::if_else(is.na(flag), 0, data$flag))
data$flag = sfun_strip_stata_attributes(data$flag) 
data = data %>%
  dplyr::mutate(flag = dplyr::if_else(is.na(flag), 0, data$flag))

data$flag = sfun_strip_stata_attributes(data$flag)

 15 do:  keep if flag==1 | group=="B"
 15 r:  data = dplyr::filter(data, flag==1 | group=="B") 
data = dplyr::filter(data, flag==1 | group=="B")

 16 do:  drop if i>35
 16 r:  data = dplyr::filter(data, !(i>35)) 
data = dplyr::filter(data, !(i>35))

 17 do:  collapse (mean) i (sum) total_i_sum = i, by(group)
 17 r:  data = data %>% 
  collapse::fgroup_by(group) %>% 
  collapse::fsummarise(`i` = collapse::fmean(i, na.rm = TRUE),
  `total_i_sum` = collapse::fsum(i, na.rm = TRUE)) %>% 
  collapse::fungroup()
data$`i` = sfun_strip_stata_attributes(data$`i`)
data$`total_i_sum` = sfun_strip_stata_attributes(data$`total_i_sum`) 
data = data %>% 
  collapse::fgroup_by(group) %>% 
  collapse::fsummarise(`i` = collapse::fmean(i, na.rm = TRUE),
  `total_i_sum` = collapse::fsum(i, na.rm = TRUE)) %>% 
  collapse::fungroup()

data$`i` = sfun_strip_stata_attributes(data$`i`)

data$`total_i_sum` = sfun_strip_stata_attributes(data$`total_i_sum`)

 18 do:  rename i mean_i_overall
 18 r:  data = collapse::frename(data, `i` = `mean_i_overall`) 
data = collapse::frename(data, `i` = `mean_i_overall`)

 19 do:  expand 2 if group=="C"
 19 r:  __expand_n_values_L19 = 2
__expand_cond_values_L19 = group=="C"
__final_expand_times_L19 = ifelse(!is.na(__expand_cond_values_L19) & __expand_cond_values_L19, ifelse(is.na(__expand_n_values_L19), 1, pmax(0, as.integer(__expand_n_values_L19))), 1)
__final_expand_times_L19 = ifelse(is.na(__final_expand_times_L19), 1, __final_expand_times_L19)
data = data[base::rep(1:NROW(data), times = __final_expand_times_L19), ]
if (exists('__expand_n_values_L19')) rm(__expand_n_values_L19, __expand_cond_values_L19, __final_expand_times_L19) 
__expand_n_values_L19 = 2
__expand_cond_values_L19 = group=="C"
__final_expand_times_L19 = ifelse(!is.na(__expand_cond_values_L19) & __expand_cond_values_L19, ifelse(is.na(__expand_n_values_L19), 1, pmax(0, as.integer(__expand_n_values_L19))), 1)
__final_expand_times_L19 = ifelse(is.na(__final_expand_times_L19), 1, __final_expand_times_L19)
data = data[base::rep(1:NROW(data), times = __final_expand_times_L19), ]
if (exists('__expand_n_values_L19')) rm(__expand_n_values_L19, __expand_cond_values_L19, __final_expand_times_L19)
Error: <text>:1:1: unexpected input
1: _
    ^
Error executing R code for Stata line  19 :  __expand_n_values_L19 = 2
__expand_cond_values_L19 = group=="C"
__final_expand_times_L19 = ifelse(!is.na(__expand_cond_values_L19) & __expand_cond_values_L19, ifelse(is.na(__expand_n_values_L19), 1, pmax(0, as.integer(__expand_n_values_L19))), 1)
__final_expand_times_L19 = ifelse(is.na(__final_expand_times_L19), 1, __final_expand_times_L19)
data = data[base::rep(1:NROW(data), times = __final_expand_times_L19), ]
if (exists('__expand_n_values_L19')) rm(__expand_n_values_L19, __expand_cond_values_L19, __final_expand_times_L19)
Error: <text>:1:1: unexpected input
1: _
    ^ 
