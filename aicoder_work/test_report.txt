In total 1 of 3 tests failed.


---
Outcome of test 'source_r': ok
All R files could be sourced.



---
Outcome of test 'do1': ok


Details:

cmd_df = do_parse(do_code)
cmd_df = mark_data_manip_cmd(cmd_df)

str(cmd_df)
'data.frame':	38 obs. of  14 variables:
 $ line                        : int  1 2 3 4 5 6 7 8 9 10 ...
 $ do_code                     : chr  "use \"data.dta\", clear" "sort group i" "keep in 1/39" "list in 1/5" ...
 $ stata_cmd_original          : chr  "use" "sort" "keep" "list" ...
 $ stata_cmd                   : chr  "use" "sort" "keep" "list" ...
 $ rest_of_cmd                 : chr  "\"data.dta\", clear" "group i" "in 1/39" "in 1/5" ...
 $ is_by_prefix                : logi  FALSE FALSE FALSE FALSE FALSE TRUE ...
 $ by_group_vars               : chr  "" "" "" "" ...
 $ by_sort_vars                : chr  "" "" "" "" ...
 $ is_quietly_prefix           : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...
 $ stata_translation_error     : chr  NA NA NA NA ...
 $ e_results_needed            :List of 38
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..- attr(*, "class")= chr "AsIs"
 $ r_results_needed            :List of 38
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..- attr(*, "class")= chr "AsIs"
 $ do_translate                : logi  TRUE TRUE TRUE FALSE FALSE TRUE ...
 $ will_have_original_order_idx: logi  TRUE TRUE TRUE TRUE TRUE TRUE ...
NULL

---
#Translate Stata to R commands... ... translation done.
---
# Run translated R commands and compare results


 1 do:  use "data.dta", clear
 1 r:  data = haven::read_dta(file.path(stata2r_env$working_dir, "data.dta")) %>% 
  sfun_strip_stata_attributes() %>% 
  sfun_normalize_string_nas() %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) %>% 
  { assign("has_original_order_idx", TRUE, envir = stata2r_env); . } # 'clear' was used 
data = haven::read_dta(file.path(stata2r_env$working_dir, "data.dta")) %>% 
  sfun_strip_stata_attributes() %>% 
  sfun_normalize_string_nas() %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) %>% 
  { assign("has_original_order_idx", TRUE, envir = stata2r_env); . } # 'clear' was used

 2 do:  sort group i
 2 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group", "i", "stata2r_original_order_idx"))) 
data = dplyr::arrange(data, !!!dplyr::syms(c("group", "i", "stata2r_original_order_idx")))

 3 do:  keep in 1/39
 3 r:  data = dplyr::slice(data, 1:39) 
data = dplyr::slice(data, 1:39)

 4 do:  list in 1/5 

 4 r:  not translated since not flagged as data manipulation

 5 do:  display _n 

 5 r:  not translated since not flagged as data manipulation

 6 do:  by group: gen seq = _n
 6 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`seq` = as.numeric(dplyr::row_number())) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`seq` = as.numeric(dplyr::row_number())) %>% 
  dplyr::ungroup()

 7 do:  gen logi = log(i)
 7 r:  data = data %>% 
  dplyr::mutate(`logi` = as.numeric(log(`i`))) 
data = data %>% 
  dplyr::mutate(`logi` = as.numeric(log(`i`)))

 8 do:  gen sqrt_i = sqrt(i)
 8 r:  data = data %>% 
  dplyr::mutate(`sqrt_i` = as.numeric(sqrt(`i`))) 
data = data %>% 
  dplyr::mutate(`sqrt_i` = as.numeric(sqrt(`i`)))

 9 do:  gen group_num = cond(group=="A",1,cond(group=="B",2,3))
 9 r:  data = data %>% 
  dplyr::mutate(`group_num` = as.numeric(sfun_stata_cond(`group`=="A", 1, sfun_stata_cond(`group`=="B", 2, 3)))) 
data = data %>% 
  dplyr::mutate(`group_num` = as.numeric(sfun_stata_cond(`group`=="A", 1, sfun_stata_cond(`group`=="B", 2, 3))))

 10 do:  egen mean_i_grp = mean(i), by(group)
 10 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`mean_i_grp` = mean(`i`, na.rm = TRUE)) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`mean_i_grp` = mean(`i`, na.rm = TRUE)) %>% 
  dplyr::ungroup()

 11 do:  egen total_i = total(i)
 11 r:  data = data %>% 
  dplyr::mutate(`total_i` = sum(`i`, na.rm = TRUE)) 
data = data %>% 
  dplyr::mutate(`total_i` = sum(`i`, na.rm = TRUE))

 12 do:  bysort group: egen rank_i = rank(i)
 12 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`rank_i` = as.numeric(base::rank(`i`, ties.method = 'average', na.last = 'keep'))) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`rank_i` = as.numeric(base::rank(`i`, ties.method = 'average', na.last = 'keep'))) %>% 
  dplyr::ungroup()

 13 do:  gen flag = (i>20) if group=="A"
 13 r:  data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else((dplyr::coalesce(as.numeric(`group`=="A"), 0) != 0), as.numeric((`i`>20)), NA_real_)) 
data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else((dplyr::coalesce(as.numeric(`group`=="A"), 0) != 0), as.numeric((`i`>20)), NA_real_))

 14 do:  replace flag = 0 if missing(flag)
 14 r:  data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else((dplyr::coalesce(as.numeric(sfun_missing(`flag`)), 0) != 0), as.numeric(0), data$`flag`)) 
data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else((dplyr::coalesce(as.numeric(sfun_missing(`flag`)), 0) != 0), as.numeric(0), data$`flag`))

 15 do:  keep if flag==1 | group=="B"
 15 r:  data = dplyr::filter(data, (dplyr::coalesce(as.numeric(`flag`==1 | `group`=="B"), 0) != 0)) 
data = dplyr::filter(data, (dplyr::coalesce(as.numeric(`flag`==1 | `group`=="B"), 0) != 0))

 16 do:  drop if i>35
 16 r:  data = dplyr::filter(data, !(dplyr::coalesce(as.numeric(`i`>35), 0) != 0)) 
data = dplyr::filter(data, !(dplyr::coalesce(as.numeric(`i`>35), 0) != 0))

 17 do:  collapse (mean) i (sum) total_i_sum = i, by(group)
 17 r:  data = data %>% 
  collapse::fgroup_by(group) %>% 
  collapse::fsummarise(`i` = collapse::fmean(`i`, na.rm = TRUE),
  `total_i_sum` = collapse::fsum(`i`, na.rm = TRUE)) %>% 
  collapse::fungroup()
data = dplyr::mutate(data, stata2r_original_order_idx = dplyr::row_number())
assign("has_original_order_idx", TRUE, envir = stata2r_env) 
data = data %>% 
  collapse::fgroup_by(group) %>% 
  collapse::fsummarise(`i` = collapse::fmean(`i`, na.rm = TRUE),
  `total_i_sum` = collapse::fsum(`i`, na.rm = TRUE)) %>% 
  collapse::fungroup()

data = dplyr::mutate(data, stata2r_original_order_idx = dplyr::row_number())

assign("has_original_order_idx", TRUE, envir = stata2r_env)

 18 do:  rename i mean_i_overall
 18 r:  data = collapse::frename(data, `i` = `mean_i_overall`) 
data = collapse::frename(data, `i` = `mean_i_overall`)

 19 do:  expand 2 if group=="C"
 19 r:  stata_tmp_expand_n_values_L19 = 2
stata_tmp_expand_cond_values_L19 = (dplyr::coalesce(as.numeric(with(data, `group`=="C")), 0) != 0)
stata_tmp_final_expand_times_L19 = ifelse(stata_tmp_expand_cond_values_L19, ifelse(is.na(stata_tmp_expand_n_values_L19), 1, pmax(0, as.integer(stata_tmp_expand_n_values_L19))), 1)
data = data[base::rep(1:NROW(data), times = stata_tmp_final_expand_times_L19), ]
data = dplyr::as_tibble(data)
if (exists('stata_tmp_expand_n_values_L19')) rm(stata_tmp_expand_n_values_L19, stata_tmp_expand_cond_values_L19, stata_tmp_final_expand_times_L19) 
stata_tmp_expand_n_values_L19 = 2

stata_tmp_expand_cond_values_L19 = (dplyr::coalesce(as.numeric(with(data, `group`=="C")), 0) != 0)

stata_tmp_final_expand_times_L19 = ifelse(stata_tmp_expand_cond_values_L19, ifelse(is.na(stata_tmp_expand_n_values_L19), 1, pmax(0, as.integer(stata_tmp_expand_n_values_L19))), 1)

data = data[base::rep(1:NROW(data), times = stata_tmp_final_expand_times_L19), ]

data = dplyr::as_tibble(data)

if (exists('stata_tmp_expand_n_values_L19')) rm(stata_tmp_expand_n_values_L19, stata_tmp_expand_cond_values_L19, stata_tmp_final_expand_times_L19)

 20 do:  duplicates drop
 20 r:  ## Calculate duplicate flag based on all variables
stata_tmp_is_duplicate_L20 = base::duplicated(data, fromLast = FALSE)
data = dplyr::filter(data, !(stata_tmp_is_duplicate_L20 & TRUE))
rm(stata_tmp_is_duplicate_L20) 
## Calculate duplicate flag based on all variables

stata_tmp_is_duplicate_L20 = base::duplicated(data, fromLast = FALSE)

data = dplyr::filter(data, !(stata_tmp_is_duplicate_L20 & TRUE))

rm(stata_tmp_is_duplicate_L20)

 21 do:  encode group, gen(group_code)
 21 r:  data = dplyr::mutate(data, `group_code` = NA_integer_)
temp_source_vector_L21 = data[['group']]
temp_unique_values_L21 = base::sort(base::unique(temp_source_vector_L21[!is.na(temp_source_vector_L21)]))
temp_numeric_values_L21 = base::match(temp_source_vector_L21, temp_unique_values_L21)
temp_labels_vector_L21 = stats::setNames(as.numeric(1:length(temp_unique_values_L21)), temp_unique_values_L21)
stata_tmp_encoded_full_L21 = haven::labelled(as.integer(temp_numeric_values_L21), labels = temp_labels_vector_L21)
rm(temp_source_vector_L21, temp_unique_values_L21, temp_numeric_values_L21, temp_labels_vector_L21)
data[['group_code']] = stata_tmp_encoded_full_L21
rm(stata_tmp_encoded_full_L21) 
data = dplyr::mutate(data, `group_code` = NA_integer_)

temp_source_vector_L21 = data[['group']]

temp_unique_values_L21 = base::sort(base::unique(temp_source_vector_L21[!is.na(temp_source_vector_L21)]))

temp_numeric_values_L21 = base::match(temp_source_vector_L21, temp_unique_values_L21)

temp_labels_vector_L21 = stats::setNames(as.numeric(1:length(temp_unique_values_L21)), temp_unique_values_L21)

stata_tmp_encoded_full_L21 = haven::labelled(as.integer(temp_numeric_values_L21), labels = temp_labels_vector_L21)

rm(temp_source_vector_L21, temp_unique_values_L21, temp_numeric_values_L21, temp_labels_vector_L21)

data[['group_code']] = stata_tmp_encoded_full_L21

rm(stata_tmp_encoded_full_L21)

 22 do:  decode group_code, gen(group_str)
 22 r:  data = dplyr::mutate(data, `group_str` = NA_character_)
## Decode values using haven::as_factor
stata_tmp_source_vector_L22 = data[['group_code']]
stata_tmp_decoded_values_L22 = as.character(haven::as_factor(stata_tmp_source_vector_L22))
stata_tmp_decoded_values_L22 = dplyr::if_else(is.na(stata_tmp_decoded_values_L22), dplyr::if_else(is.na(stata_tmp_source_vector_L22), "", as.character(stata_tmp_source_vector_L22)), stata_tmp_decoded_values_L22)
data = dplyr::mutate(data, `group_str` = stata_tmp_decoded_values_L22)
rm(stata_tmp_decoded_values_L22, stata_tmp_source_vector_L22) 
data = dplyr::mutate(data, `group_str` = NA_character_)

## Decode values using haven::as_factor

stata_tmp_source_vector_L22 = data[['group_code']]

stata_tmp_decoded_values_L22 = as.character(haven::as_factor(stata_tmp_source_vector_L22))

stata_tmp_decoded_values_L22 = dplyr::if_else(is.na(stata_tmp_decoded_values_L22), dplyr::if_else(is.na(stata_tmp_source_vector_L22), "", as.character(stata_tmp_source_vector_L22)), stata_tmp_decoded_values_L22)

data = dplyr::mutate(data, `group_str` = stata_tmp_decoded_values_L22)

rm(stata_tmp_decoded_values_L22, stata_tmp_source_vector_L22)

 23 do:  sort group_code
 23 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group_code", "stata2r_original_order_idx"))) 
data = dplyr::arrange(data, !!!dplyr::syms(c("group_code", "stata2r_original_order_idx")))

 24 do:  tempfile t1
 24 r:  R_tempfile_L24_t1_path = tempfile(fileext = '.dta') # Stata tempfile 't1' 
R_tempfile_L24_t1_path = tempfile(fileext = '.dta') # Stata tempfile 't1'

 25 do:  save "`t1'"
 25 r:  haven::write_dta(data, path = R_tempfile_L24_t1_path) 
haven::write_dta(data, path = R_tempfile_L24_t1_path)

 26 do:  keep if group_code==1
 26 r:  data = dplyr::filter(data, (dplyr::coalesce(as.numeric(`group_code`==1), 0) != 0)) 
data = dplyr::filter(data, (dplyr::coalesce(as.numeric(`group_code`==1), 0) != 0))

 27 do:  merge 1:m group_code using "`t1'", keep(match master) nogenerate
 27 r:  stata_merge_keys_L27 = c("group_code")
stata_tmp_using_data_L27 = haven::read_dta(R_tempfile_L24_t1_path)
data = sfun_strip_stata_attributes(data)
data = sfun_normalize_string_nas(data)
stata_tmp_using_data_L27 = sfun_strip_stata_attributes(stata_tmp_using_data_L27)
stata_tmp_using_data_L27 = sfun_normalize_string_nas(stata_tmp_using_data_L27)
data = dplyr::mutate(data, dplyr::across(dplyr::all_of(stata_merge_keys_L27), as.numeric))
stata_tmp_using_data_L27 = dplyr::mutate(stata_tmp_using_data_L27, dplyr::across(dplyr::all_of(stata_merge_keys_L27), as.numeric))
common_cols = intersect(names(data), names(stata_tmp_using_data_L27))
common_cols_not_by = setdiff(common_cols, stata_merge_keys_L27)
if (length(common_cols_not_by) > 0) { stata_tmp_using_data_L27 = dplyr::select(stata_tmp_using_data_L27, -dplyr::all_of(common_cols_not_by)) }
data = dplyr::inner_join(data, stata_tmp_using_data_L27, by = stata_merge_keys_L27, indicator = "stata_merge_indicator_L27")
data = sfun_normalize_string_nas(data)
 # _merge variable was not generated due to 'nogenerate' option.
data = dplyr::select(data, -dplyr::any_of('stata_merge_indicator_L27'))
rm(stata_tmp_using_data_L27, common_cols, common_cols_not_by, stata_merge_keys_L27)
# Stata merge type: 1:m, keep(match master (inner_join)), nogenerate 
stata_merge_keys_L27 = c("group_code")

stata_tmp_using_data_L27 = haven::read_dta(R_tempfile_L24_t1_path)

data = sfun_strip_stata_attributes(data)

data = sfun_normalize_string_nas(data)

stata_tmp_using_data_L27 = sfun_strip_stata_attributes(stata_tmp_using_data_L27)

stata_tmp_using_data_L27 = sfun_normalize_string_nas(stata_tmp_using_data_L27)

data = dplyr::mutate(data, dplyr::across(dplyr::all_of(stata_merge_keys_L27), as.numeric))

stata_tmp_using_data_L27 = dplyr::mutate(stata_tmp_using_data_L27, dplyr::across(dplyr::all_of(stata_merge_keys_L27), as.numeric))

common_cols = intersect(names(data), names(stata_tmp_using_data_L27))

common_cols_not_by = setdiff(common_cols, stata_merge_keys_L27)

if (length(common_cols_not_by) > 0) { stata_tmp_using_data_L27 = dplyr::select(stata_tmp_using_data_L27, -dplyr::all_of(common_cols_not_by)) }

data = dplyr::inner_join(data, stata_tmp_using_data_L27, by = stata_merge_keys_L27, indicator = "stata_merge_indicator_L27")

data = sfun_normalize_string_nas(data)

 # _merge variable was not generated due to 'nogenerate' option.

data = dplyr::select(data, -dplyr::any_of('stata_merge_indicator_L27'))

rm(stata_tmp_using_data_L27, common_cols, common_cols_not_by, stata_merge_keys_L27)

# Stata merge type: 1:m, keep(match master (inner_join)), nogenerate

 28 do:  append using "`t1'"
 28 r:  stata_tmp_using_data_L28 = haven::read_dta(R_tempfile_L24_t1_path)
stata_tmp_using_data_L28 = sfun_strip_stata_attributes(stata_tmp_using_data_L28)
stata_tmp_using_data_L28 = sfun_normalize_string_nas(stata_tmp_using_data_L28)
stata_tmp_master_data_L28 = data
stata_tmp_master_data_L28 = sfun_normalize_string_nas(stata_tmp_master_data_L28)
data = dplyr::bind_rows(stata_tmp_master_data_L28, stata_tmp_using_data_L28)
data = sfun_normalize_string_nas(data)
if (isTRUE(stata2r_env$has_original_order_idx)) { data = dplyr::mutate(data, stata2r_original_order_idx = dplyr::row_number()) }
rm(stata_tmp_using_data_L28, stata_tmp_master_data_L28) 
stata_tmp_using_data_L28 = haven::read_dta(R_tempfile_L24_t1_path)

stata_tmp_using_data_L28 = sfun_strip_stata_attributes(stata_tmp_using_data_L28)

stata_tmp_using_data_L28 = sfun_normalize_string_nas(stata_tmp_using_data_L28)

stata_tmp_master_data_L28 = data

stata_tmp_master_data_L28 = sfun_normalize_string_nas(stata_tmp_master_data_L28)

data = dplyr::bind_rows(stata_tmp_master_data_L28, stata_tmp_using_data_L28)

data = sfun_normalize_string_nas(data)

if (isTRUE(stata2r_env$has_original_order_idx)) { data = dplyr::mutate(data, stata2r_original_order_idx = dplyr::row_number()) }

rm(stata_tmp_using_data_L28, stata_tmp_master_data_L28)

 29 do:  gen id = _n
 29 r:  data = data %>% 
  dplyr::mutate(`id` = as.numeric(dplyr::row_number())) 
data = data %>% 
  dplyr::mutate(`id` = as.numeric(dplyr::row_number()))

 30 do:  bysort group_code (mean_i_overall): gen diff_mean = mean_i_overall - mean_i_overall[_n-1]
 30 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_code"))) %>% 
  dplyr::mutate(`diff_mean` = as.numeric(`mean_i_overall` - dplyr::lag(`mean_i_overall`, n = 1))) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_code"))) %>% 
  dplyr::mutate(`diff_mean` = as.numeric(`mean_i_overall` - dplyr::lag(`mean_i_overall`, n = 1))) %>% 
  dplyr::ungroup()

 31 do:  recode group_code (1=10)(2=20)(3=30)
 31 r:  data = dplyr::mutate(data, `group_code` = dplyr::case_when(
    group_code %in% c(1) ~ 10,
    group_code %in% c(2) ~ 20,
    group_code %in% c(3) ~ 30
  )) 
data = dplyr::mutate(data, `group_code` = dplyr::case_when(
    group_code %in% c(1) ~ 10,
    group_code %in% c(2) ~ 20,
    group_code %in% c(3) ~ 30
  ))

 32 do:  drop if missing(mean_i_overall)
 32 r:  data = dplyr::filter(data, !(dplyr::coalesce(as.numeric(sfun_missing(`mean_i_overall`)), 0) != 0)) 
data = dplyr::filter(data, !(dplyr::coalesce(as.numeric(sfun_missing(`mean_i_overall`)), 0) != 0))

 33 do:  order id group_code mean_i_overall
 33 r:  data = dplyr::select(data, id, group_code, mean_i_overall, dplyr::everything()) 
data = dplyr::select(data, id, group_code, mean_i_overall, dplyr::everything())

 34 do:  collapse (sum) sum_mean = mean_i_overall, by(group_code)
 34 r:  data = data %>% 
  collapse::fgroup_by(group_code) %>% 
  collapse::fsummarise(`sum_mean` = collapse::fsum(`mean_i_overall`, na.rm = TRUE)) %>% 
  collapse::fungroup()
data = dplyr::mutate(data, stata2r_original_order_idx = dplyr::row_number())
assign("has_original_order_idx", TRUE, envir = stata2r_env) 
data = data %>% 
  collapse::fgroup_by(group_code) %>% 
  collapse::fsummarise(`sum_mean` = collapse::fsum(`mean_i_overall`, na.rm = TRUE)) %>% 
  collapse::fungroup()

data = dplyr::mutate(data, stata2r_original_order_idx = dplyr::row_number())

assign("has_original_order_idx", TRUE, envir = stata2r_env)

 35 do:  egen total_sum = total(sum_mean)
 35 r:  data = data %>% 
  dplyr::mutate(`total_sum` = sum(`sum_mean`, na.rm = TRUE)) 
data = data %>% 
  dplyr::mutate(`total_sum` = sum(`sum_mean`, na.rm = TRUE))

 36 do:  gen proportion = sum_mean/total_sum
 36 r:  data = data %>% 
  dplyr::mutate(`proportion` = as.numeric(`sum_mean`/`total_sum`)) 
data = data %>% 
  dplyr::mutate(`proportion` = as.numeric(`sum_mean`/`total_sum`))

 37 do:  sort proportion
 37 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("proportion", "stata2r_original_order_idx"))) 
data = dplyr::arrange(data, !!!dplyr::syms(c("proportion", "stata2r_original_order_idx")))

 38 do:  save "result_data.dta", replace 

 38 r:  not translated since not flagged as data manipulation


---
Outcome of test 'do2': not ok


Details:

cmd_df = do_parse(do_code)
cmd_df = mark_data_manip_cmd(cmd_df)

str(cmd_df)
'data.frame':	82 obs. of  14 variables:
 $ line                        : int  1 2 3 4 5 6 7 8 9 10 ...
 $ do_code                     : chr  "use \"test_data.dta\", clear" "generate value1_log = log(value1)" "generate value2_squared = value2^2" "generate int_value1 = int(value1) if !missing(value1)" ...
 $ stata_cmd_original          : chr  "use" "generate" "generate" "generate" ...
 $ stata_cmd                   : chr  "use" "generate" "generate" "generate" ...
 $ rest_of_cmd                 : chr  "\"test_data.dta\", clear" "value1_log = log(value1)" "value2_squared = value2^2" "int_value1 = int(value1) if !missing(value1)" ...
 $ is_by_prefix                : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...
 $ by_group_vars               : chr  "" "" "" "" ...
 $ by_sort_vars                : chr  "" "" "" "" ...
 $ is_quietly_prefix           : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...
 $ stata_translation_error     : chr  NA NA NA NA ...
 $ e_results_needed            :List of 82
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..- attr(*, "class")= chr "AsIs"
 $ r_results_needed            :List of 82
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr "r(mean)"
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..- attr(*, "class")= chr "AsIs"
 $ do_translate                : logi  TRUE TRUE TRUE TRUE TRUE TRUE ...
 $ will_have_original_order_idx: logi  TRUE TRUE TRUE TRUE TRUE TRUE ...
NULL

---
#Translate Stata to R commands... ... translation done.
---
# Run translated R commands and compare results


 1 do:  use "test_data.dta", clear
 1 r:  data = haven::read_dta(file.path(stata2r_env$working_dir, "test_data.dta")) %>% 
  sfun_strip_stata_attributes() %>% 
  sfun_normalize_string_nas() %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) %>% 
  { assign("has_original_order_idx", TRUE, envir = stata2r_env); . } # 'clear' was used 
data = haven::read_dta(file.path(stata2r_env$working_dir, "test_data.dta")) %>% 
  sfun_strip_stata_attributes() %>% 
  sfun_normalize_string_nas() %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) %>% 
  { assign("has_original_order_idx", TRUE, envir = stata2r_env); . } # 'clear' was used

 2 do:  generate value1_log = log(value1)
 2 r:  data = data %>% 
  dplyr::mutate(`value1_log` = as.numeric(log(`value1`))) 
data = data %>% 
  dplyr::mutate(`value1_log` = as.numeric(log(`value1`)))

 3 do:  generate value2_squared = value2^2
 3 r:  data = data %>% 
  dplyr::mutate(`value2_squared` = as.numeric(`value2`^2)) 
data = data %>% 
  dplyr::mutate(`value2_squared` = as.numeric(`value2`^2))

 4 do:  generate int_value1 = int(value1) if !missing(value1)
 4 r:  data = data %>% 
  dplyr::mutate(`int_value1` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`value1`)), 0) != 0), as.numeric(trunc(`value1`)), NA_real_)) 
data = data %>% 
  dplyr::mutate(`int_value1` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`value1`)), 0) != 0), as.numeric(trunc(`value1`)), NA_real_))

 5 do:  generate rounded_value1 = round(value1, 0.1) if !missing(value1)
 5 r:  data = data %>% 
  dplyr::mutate(`rounded_value1` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`value1`)), 0) != 0), as.numeric(sfun_stata_round(`value1`,  0.1)), NA_real_)) 
data = data %>% 
  dplyr::mutate(`rounded_value1` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`value1`)), 0) != 0), as.numeric(sfun_stata_round(`value1`,  0.1)), NA_real_))

 6 do:  generate random_uniform_draw = runiform()
 6 r:  data = data %>% 
  dplyr::mutate(`random_uniform_draw` = as.numeric(stats::`runif`(dplyr::n()))) 
data = data %>% 
  dplyr::mutate(`random_uniform_draw` = as.numeric(stats::`runif`(dplyr::n())))

 7 do:  generate id_plus_value2 = id + value2 if value2 < 7 & !missing(value2)
 7 r:  data = data %>% 
  dplyr::mutate(`id_plus_value2` = dplyr::if_else((dplyr::coalesce(as.numeric(`value2` < 7 & !sfun_missing(`value2`)), 0) != 0), as.numeric(sfun_stata_add(`id`, `value2`)), NA_real_)) 
data = data %>% 
  dplyr::mutate(`id_plus_value2` = dplyr::if_else((dplyr::coalesce(as.numeric(`value2` < 7 & !sfun_missing(`value2`)), 0) != 0), as.numeric(sfun_stata_add(`id`, `value2`)), NA_real_))

 8 do:  replace value1_log = 0 if missing(value1_log) & !missing(value1)
 8 r:  data = data %>% 
  dplyr::mutate(`value1_log` = dplyr::if_else((dplyr::coalesce(as.numeric(sfun_missing(`value1_log`) & !sfun_missing(`value1`)), 0) != 0), as.numeric(0), data$`value1_log`)) 
data = data %>% 
  dplyr::mutate(`value1_log` = dplyr::if_else((dplyr::coalesce(as.numeric(sfun_missing(`value1_log`) & !sfun_missing(`value1`)), 0) != 0), as.numeric(0), data$`value1_log`))

 9 do:  replace value1 = value1 * 1.5 if group_orig == "Alpha" & !missing(value1) & !missing(group_orig)
 9 r:  data = data %>% 
  dplyr::mutate(`value1` = dplyr::if_else((dplyr::coalesce(as.numeric(`group_orig` == "Alpha" & !sfun_missing(`value1`) & !sfun_missing(`group_orig`)), 0) != 0), as.numeric(`value1` * 1.5), data$`value1`)) 
data = data %>% 
  dplyr::mutate(`value1` = dplyr::if_else((dplyr::coalesce(as.numeric(`group_orig` == "Alpha" & !sfun_missing(`value1`) & !sfun_missing(`group_orig`)), 0) != 0), as.numeric(`value1` * 1.5), data$`value1`))

 10 do:  gen group_clean = strtrim(stritrim(lower(group_orig)))
 10 r:  data = data %>% 
  dplyr::mutate(`group_clean` = as.character(stringi::`stri_trim_right`(sfun_stritrim(stringi::`stri_trans_tolower`(`group_orig`))))) 
data = data %>% 
  dplyr::mutate(`group_clean` = as.character(stringi::`stri_trim_right`(sfun_stritrim(stringi::`stri_trans_tolower`(`group_orig`)))))

 11 do:  replace group_clean = "unknown" if missing(group_clean)
 11 r:  data = data %>% 
  dplyr::mutate(`group_clean` = dplyr::if_else((dplyr::coalesce(as.numeric(sfun_missing(`group_clean`)), 0) != 0), as.character("unknown"), data$`group_clean`)) 
data = data %>% 
  dplyr::mutate(`group_clean` = dplyr::if_else((dplyr::coalesce(as.numeric(sfun_missing(`group_clean`)), 0) != 0), as.character("unknown"), data$`group_clean`))

 12 do:  gen group_abbr = substr(group_clean, 1, 3) if group_clean != "unknown"
 12 r:  data = data %>% 
  dplyr::mutate(`group_abbr` = dplyr::if_else((dplyr::coalesce(as.numeric(`group_clean` != "unknown"), 0) != 0), as.character(stringi::`stri_sub`(`group_clean`, `from` =  1, length =  3)), "")) 
data = data %>% 
  dplyr::mutate(`group_abbr` = dplyr::if_else((dplyr::coalesce(as.numeric(`group_clean` != "unknown"), 0) != 0), as.character(stringi::`stri_sub`(`group_clean`, `from` =  1, length =  3)), ""))

 13 do:  gen contact_info = group_clean + ":" + num_str
 13 r:  data = data %>% 
  dplyr::mutate(`contact_info` = as.character(sfun_stata_add(sfun_stata_add(`group_clean`, ":") , `num_str`))) 
data = data %>% 
  dplyr::mutate(`contact_info` = as.character(sfun_stata_add(sfun_stata_add(`group_clean`, ":") , `num_str`)))

 14 do:  gen str_len_group = strlen(group_clean)
 14 r:  data = data %>% 
  dplyr::mutate(`str_len_group` = as.numeric(stringi::`stri_length`(`group_clean`))) 
data = data %>% 
  dplyr::mutate(`str_len_group` = as.numeric(stringi::`stri_length`(`group_clean`)))

 15 do:  replace contact_info = subinstr(contact_info, "beta", "delta", 1) if strpos(contact_info, "beta") > 0
 15 r:  data = data %>% 
  dplyr::mutate(`contact_info` = dplyr::if_else((dplyr::coalesce(as.numeric(sfun_strpos(`contact_info`,  "beta") > 0), 0) != 0), as.character(sfun_subinstr(`contact_info`,  "beta",  "delta",  1)), data$`contact_info`)) 
data = data %>% 
  dplyr::mutate(`contact_info` = dplyr::if_else((dplyr::coalesce(as.numeric(sfun_strpos(`contact_info`,  "beta") > 0), 0) != 0), as.character(sfun_subinstr(`contact_info`,  "beta",  "delta",  1)), data$`contact_info`))

 16 do:  egen mean_overall_value1 = mean(value1)
 16 r:  data = data %>% 
  dplyr::mutate(`mean_overall_value1` = mean(`value1`, na.rm = TRUE)) 
data = data %>% 
  dplyr::mutate(`mean_overall_value1` = mean(`value1`, na.rm = TRUE))

 17 do:  egen sd_overall_value1 = sd(value1)
 17 r:  data = data %>% 
  dplyr::mutate(`sd_overall_value1` = stats::sd(`value1`, na.rm = TRUE)) 
data = data %>% 
  dplyr::mutate(`sd_overall_value1` = stats::sd(`value1`, na.rm = TRUE))

 18 do:  egen total_value2_by_group = total(value2), by(group_clean)
 18 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`total_value2_by_group` = sum(`value2`, na.rm = TRUE)) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`total_value2_by_group` = sum(`value2`, na.rm = TRUE)) %>% 
  dplyr::ungroup()

 19 do:  egen median_value1_by_group = median(value1), by(group_clean)
 19 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`median_value1_by_group` = stats::median(`value1`, na.rm = TRUE)) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`median_value1_by_group` = stats::median(`value1`, na.rm = TRUE)) %>% 
  dplyr::ungroup()

 20 do:  egen group_numeric_id = group(group_clean)
 20 r:  stata_tmp_egen_order_L20 = dplyr::select(data, c("stata2r_original_order_idx", "group_clean"))
stata_tmp_egen_order_L20 = stata_tmp_egen_order_L20 %>% dplyr::arrange(!!!dplyr::syms(c("group_clean", "stata2r_original_order_idx")))
stata_tmp_egen_order_L20 = stata_tmp_egen_order_L20 %>% dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% dplyr::mutate(`group_numeric_id` = dplyr::cur_group_id()) %>% dplyr::ungroup()
data = dplyr::left_join(data, dplyr::select(stata_tmp_egen_order_L20, stata2r_original_order_idx, `group_numeric_id`), by = "stata2r_original_order_idx")
rm(stata_tmp_egen_order_L20) 
stata_tmp_egen_order_L20 = dplyr::select(data, c("stata2r_original_order_idx", "group_clean"))

stata_tmp_egen_order_L20 = stata_tmp_egen_order_L20 %>% dplyr::arrange(!!!dplyr::syms(c("group_clean", "stata2r_original_order_idx")))

stata_tmp_egen_order_L20 = stata_tmp_egen_order_L20 %>% dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% dplyr::mutate(`group_numeric_id` = dplyr::cur_group_id()) %>% dplyr::ungroup()

data = dplyr::left_join(data, dplyr::select(stata_tmp_egen_order_L20, stata2r_original_order_idx, `group_numeric_id`), by = "stata2r_original_order_idx")

rm(stata_tmp_egen_order_L20)

 21 do:  egen tag_first_in_group = tag(group_clean)
 21 r:  stata_tmp_egen_order_L21 = dplyr::select(data, c("stata2r_original_order_idx", "group_clean"))
stata_tmp_egen_order_L21 = stata_tmp_egen_order_L21 %>% dplyr::arrange(!!!dplyr::syms(c("group_clean", "stata2r_original_order_idx")))
stata_tmp_egen_order_L21 = stata_tmp_egen_order_L21 %>% dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% dplyr::mutate(`tag_first_in_group` = as.numeric(dplyr::row_number() == 1)) %>% dplyr::ungroup()
data = dplyr::left_join(data, dplyr::select(stata_tmp_egen_order_L21, stata2r_original_order_idx, `tag_first_in_group`), by = "stata2r_original_order_idx")
rm(stata_tmp_egen_order_L21) 
stata_tmp_egen_order_L21 = dplyr::select(data, c("stata2r_original_order_idx", "group_clean"))

stata_tmp_egen_order_L21 = stata_tmp_egen_order_L21 %>% dplyr::arrange(!!!dplyr::syms(c("group_clean", "stata2r_original_order_idx")))

stata_tmp_egen_order_L21 = stata_tmp_egen_order_L21 %>% dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% dplyr::mutate(`tag_first_in_group` = as.numeric(dplyr::row_number() == 1)) %>% dplyr::ungroup()

data = dplyr::left_join(data, dplyr::select(stata_tmp_egen_order_L21, stata2r_original_order_idx, `tag_first_in_group`), by = "stata2r_original_order_idx")

rm(stata_tmp_egen_order_L21)

 22 do:  egen count_obs_in_group = count(id), by(group_clean)
 22 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`count_obs_in_group` = sum(!is.na(`id`))) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`count_obs_in_group` = sum(!is.na(`id`))) %>% 
  dplyr::ungroup()

 23 do:  egen rank_value1_in_group = rank(value1), by(group_clean)
 23 r:  stata_tmp_egen_order_L23 = dplyr::select(data, c("stata2r_original_order_idx", "group_clean", "value1"))
stata_tmp_egen_order_L23 = stata_tmp_egen_order_L23 %>% dplyr::arrange(!!!dplyr::syms(c("group_clean", "value1", "stata2r_original_order_idx")))
stata_tmp_egen_order_L23 = stata_tmp_egen_order_L23 %>% dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% dplyr::mutate(`rank_value1_in_group` = as.numeric(base::rank(`value1`, ties.method = 'average', na.last = 'keep'))) %>% dplyr::ungroup()
data = dplyr::left_join(data, dplyr::select(stata_tmp_egen_order_L23, stata2r_original_order_idx, `rank_value1_in_group`), by = "stata2r_original_order_idx")
rm(stata_tmp_egen_order_L23) 
stata_tmp_egen_order_L23 = dplyr::select(data, c("stata2r_original_order_idx", "group_clean", "value1"))

stata_tmp_egen_order_L23 = stata_tmp_egen_order_L23 %>% dplyr::arrange(!!!dplyr::syms(c("group_clean", "value1", "stata2r_original_order_idx")))

stata_tmp_egen_order_L23 = stata_tmp_egen_order_L23 %>% dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% dplyr::mutate(`rank_value1_in_group` = as.numeric(base::rank(`value1`, ties.method = 'average', na.last = 'keep'))) %>% dplyr::ungroup()

data = dplyr::left_join(data, dplyr::select(stata_tmp_egen_order_L23, stata2r_original_order_idx, `rank_value1_in_group`), by = "stata2r_original_order_idx")

rm(stata_tmp_egen_order_L23)

 24 do:  egen row_total_v1_v2 = rowtotal(value1 value2)
 24 r:  data = data %>% 
  dplyr::mutate(`row_total_v1_v2` = base::rowSums(dplyr::select(dplyr::cur_data_all(), dplyr::all_of(c('value1','value2'))) %>% replace(is.na(.), 0), na.rm = FALSE)) 
data = data %>% 
  dplyr::mutate(`row_total_v1_v2` = base::rowSums(dplyr::select(dplyr::cur_data_all(), dplyr::all_of(c('value1','value2'))) %>% replace(is.na(.), 0), na.rm = FALSE))

 25 do:  egen row_mean_v1_v2 = rowmean(value1 value2)
 25 r:  data = data %>% 
  dplyr::mutate(`row_mean_v1_v2` = base::rowMeans(dplyr::select(dplyr::cur_data_all(), dplyr::all_of(c('value1','value2'))), na.rm = TRUE)) 
data = data %>% 
  dplyr::mutate(`row_mean_v1_v2` = base::rowMeans(dplyr::select(dplyr::cur_data_all(), dplyr::all_of(c('value1','value2'))), na.rm = TRUE))

 26 do:  egen concat_group_num = concat(group_clean num_str)
 26 r:  data = data %>% 
  dplyr::mutate(`concat_group_num` = dplyr::if_else((is.na(data[['group_clean']]) & is.na(data[['num_str']])), NA_character_, stringi::stri_paste(dplyr::if_else(is.na(as.character(data[['group_clean']])), "", as.character(data[['group_clean']])), dplyr::if_else(is.na(as.character(data[['num_str']])), "", as.character(data[['num_str']])), sep = ''))) 
data = data %>% 
  dplyr::mutate(`concat_group_num` = dplyr::if_else((is.na(data[['group_clean']]) & is.na(data[['num_str']])), NA_character_, stringi::stri_paste(dplyr::if_else(is.na(as.character(data[['group_clean']])), "", as.character(data[['group_clean']])), dplyr::if_else(is.na(as.character(data[['num_str']])), "", as.character(data[['num_str']])), sep = '')))

 27 do:  summarize value2, meanonly
 27 r:  stata_r_val_L27_mean = collapse::fmean(data[['value2']], na.rm = TRUE)
 # Other options ignored: meanonly 
stata_r_val_L27_mean = collapse::fmean(data[['value2']], na.rm = TRUE)

 # Other options ignored: meanonly

 28 do:  gen value2_dev_from_mean = value2 - r(mean) if !missing(value2) & r(mean) != .
 28 r:  data = data %>% 
  dplyr::mutate(`value2_dev_from_mean` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`value2`) & !sfun_missing(stata_r_val_L27_mean)), 0) != 0), as.numeric(`value2` - stata_r_val_L27_mean), NA_real_)) 
data = data %>% 
  dplyr::mutate(`value2_dev_from_mean` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`value2`) & !sfun_missing(stata_r_val_L27_mean)), 0) != 0), as.numeric(`value2` - stata_r_val_L27_mean), NA_real_))

 29 do:  gen obs_date = date(date_str, "YMD", 2050)
 29 r:  data = data %>% 
  dplyr::mutate(`obs_date` = as.numeric(sfun_stata_date(`date_str`,  "YMD",  2050))) 
data = data %>% 
  dplyr::mutate(`obs_date` = as.numeric(sfun_stata_date(`date_str`,  "YMD",  2050)))

 30 do:  format obs_date %tdCY-N-D 

 30 r:  not translated since not flagged as data manipulation

 31 do:  gen obs_year = year(obs_date) if !missing(obs_date)
 31 r:  data = data %>% 
  dplyr::mutate(`obs_year` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`obs_date`)), 0) != 0), as.numeric(sfun_year(`obs_date`)), NA_real_)) 
data = data %>% 
  dplyr::mutate(`obs_year` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`obs_date`)), 0) != 0), as.numeric(sfun_year(`obs_date`)), NA_real_))

 32 do:  gen obs_month = month(obs_date) if !missing(obs_date)
 32 r:  data = data %>% 
  dplyr::mutate(`obs_month` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`obs_date`)), 0) != 0), as.numeric(sfun_month(`obs_date`)), NA_real_)) 
data = data %>% 
  dplyr::mutate(`obs_month` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`obs_date`)), 0) != 0), as.numeric(sfun_month(`obs_date`)), NA_real_))

 33 do:  gen obs_day = day(obs_date) if !missing(obs_date)
 33 r:  data = data %>% 
  dplyr::mutate(`obs_day` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`obs_date`)), 0) != 0), as.numeric(sfun_day(`obs_date`)), NA_real_)) 
data = data %>% 
  dplyr::mutate(`obs_day` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`obs_date`)), 0) != 0), as.numeric(sfun_day(`obs_date`)), NA_real_))

 34 do:  gen obs_quarter = qofd(obs_date) if !missing(obs_date)
 34 r:  data = data %>% 
  dplyr::mutate(`obs_quarter` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`obs_date`)), 0) != 0), as.numeric(sfun_qofd(`obs_date`)), NA_real_)) 
data = data %>% 
  dplyr::mutate(`obs_quarter` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`obs_date`)), 0) != 0), as.numeric(sfun_qofd(`obs_date`)), NA_real_))

 35 do:  gen days_since_2021_start = obs_date - mdy(1,1,2021) if !missing(obs_date)
 35 r:  data = data %>% 
  dplyr::mutate(`days_since_2021_start` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`obs_date`)), 0) != 0), as.numeric(`obs_date` - sfun_stata_mdy(1, 1, 2021)), NA_real_)) 
data = data %>% 
  dplyr::mutate(`days_since_2021_start` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`obs_date`)), 0) != 0), as.numeric(`obs_date` - sfun_stata_mdy(1, 1, 2021)), NA_real_))

 36 do:  gen is_weekend_day = (dow(obs_date) == 0 | dow(obs_date) == 6) if !missing(obs_date)
 36 r:  data = data %>% 
  dplyr::mutate(`is_weekend_day` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`obs_date`)), 0) != 0), as.numeric((sfun_dow(`obs_date`) == 0 | sfun_dow(`obs_date`) == 6)), NA_real_)) 
data = data %>% 
  dplyr::mutate(`is_weekend_day` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`obs_date`)), 0) != 0), as.numeric((sfun_dow(`obs_date`) == 0 | sfun_dow(`obs_date`) == 6)), NA_real_))

 37 do:  destring num_str, generate(num_val_from_str) ignore("error")
 37 r:  data = dplyr::mutate(data, `num_val_from_str` = readr::parse_number(as.character(num_str))) # Other options ignored: ignore("error") 
data = dplyr::mutate(data, `num_val_from_str` = readr::parse_number(as.character(num_str))) # Other options ignored: ignore("error")

 38 do:  replace num_val_from_str = 0 if missing(num_val_from_str)
 38 r:  data = data %>% 
  dplyr::mutate(`num_val_from_str` = dplyr::if_else((dplyr::coalesce(as.numeric(sfun_missing(`num_val_from_str`)), 0) != 0), as.numeric(0), data$`num_val_from_str`)) 
data = data %>% 
  dplyr::mutate(`num_val_from_str` = dplyr::if_else((dplyr::coalesce(as.numeric(sfun_missing(`num_val_from_str`)), 0) != 0), as.numeric(0), data$`num_val_from_str`))

 39 do:  destring mixed_var, generate(mixed_val_num) force
 39 r:  data = dplyr::mutate(data, `mixed_val_num` = readr::parse_number(as.character(mixed_var))) # Other options ignored: force 
data = dplyr::mutate(data, `mixed_val_num` = readr::parse_number(as.character(mixed_var))) # Other options ignored: force

Warning: 12 parsing failures.
row col expected actual
  1  -- a number apple 
  7  -- a number apple 
  8  -- a number apple 
 16  -- a number banana
 20  -- a number banana
... ... ........ ......
See problems(...) for more details.

Warning: Problem with `mutate()` column `mixed_val_num`.
ℹ `mixed_val_num = readr::parse_number(as.character(mixed_var))`.
ℹ 12 parsing failures.
row col expected actual
  1  -- a number apple 
  7  -- a number apple 
  8  -- a number apple 
 16  -- a number banana
 20  -- a number banana
... ... ........ ......
See problems(...) for more details.

 40 do:  gen mixed_var_as_str = string(mixed_val_num) if !missing(mixed_val_num)
 40 r:  data = data %>% 
  dplyr::mutate(`mixed_var_as_str` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`mixed_val_num`)), 0) != 0), as.character(sfun_string(`mixed_val_num`)), "")) 
data = data %>% 
  dplyr::mutate(`mixed_var_as_str` = dplyr::if_else((dplyr::coalesce(as.numeric(!sfun_missing(`mixed_val_num`)), 0) != 0), as.character(sfun_string(`mixed_val_num`)), ""))

 41 do:  encode group_clean, generate(group_code_num)
 41 r:  data = dplyr::mutate(data, `group_code_num` = NA_integer_)
temp_source_vector_L41 = data[['group_clean']]
temp_unique_values_L41 = base::sort(base::unique(temp_source_vector_L41[!is.na(temp_source_vector_L41)]))
temp_numeric_values_L41 = base::match(temp_source_vector_L41, temp_unique_values_L41)
temp_labels_vector_L41 = stats::setNames(as.numeric(1:length(temp_unique_values_L41)), temp_unique_values_L41)
stata_tmp_encoded_full_L41 = haven::labelled(as.integer(temp_numeric_values_L41), labels = temp_labels_vector_L41)
rm(temp_source_vector_L41, temp_unique_values_L41, temp_numeric_values_L41, temp_labels_vector_L41)
data[['group_code_num']] = stata_tmp_encoded_full_L41
rm(stata_tmp_encoded_full_L41) 
data = dplyr::mutate(data, `group_code_num` = NA_integer_)

temp_source_vector_L41 = data[['group_clean']]

temp_unique_values_L41 = base::sort(base::unique(temp_source_vector_L41[!is.na(temp_source_vector_L41)]))

temp_numeric_values_L41 = base::match(temp_source_vector_L41, temp_unique_values_L41)

temp_labels_vector_L41 = stats::setNames(as.numeric(1:length(temp_unique_values_L41)), temp_unique_values_L41)

stata_tmp_encoded_full_L41 = haven::labelled(as.integer(temp_numeric_values_L41), labels = temp_labels_vector_L41)

rm(temp_source_vector_L41, temp_unique_values_L41, temp_numeric_values_L41, temp_labels_vector_L41)

data[['group_code_num']] = stata_tmp_encoded_full_L41

rm(stata_tmp_encoded_full_L41)

 42 do:  label define group_label_map 1 "alpha" 2 "beta" 3 "gamma" 4 "unknown", replace
 42 r:  if (!exists("label_defs", envir = stata2r_env)) stata2r_env$label_defs = list()
stata2r_env$label_defs$`group_label_map` = stats::setNames(c(1, 2, 3, 4), c("alpha", "beta", "gamma", "unknown")) 
if (!exists("label_defs", envir = stata2r_env)) stata2r_env$label_defs = list()

stata2r_env$label_defs$`group_label_map` = stats::setNames(c(1, 2, 3, 4), c("alpha", "beta", "gamma", "unknown"))

 43 do:  label values group_code_num group_label_map
 43 r:  if (!exists("label_defs", envir = stata2r_env)) stata2r_env$label_defs = list()
label_map_to_apply = stata2r_env$label_defs$`group_label_map`
if (!is.null(label_map_to_apply)) {
  temp_attr_label = attr(data[['group_code_num']], 'label')
  existing_var_label = if (is.null(temp_attr_label) || length(temp_attr_label) == 0) NA_character_ else as.character(temp_attr_label[1])
  stata_tmp_labelled_L43_group_code_num = haven::labelled(data[['group_code_num']], labels = label_map_to_apply, label = existing_var_label)
  data[['group_code_num']] = stata_tmp_labelled_L43_group_code_num
  rm(stata_tmp_labelled_L43_group_code_num)
} else {
  warning(paste0('Label definition `group_label_map` not found for `label values` command on line 43. Labels removed from ', 'group_code_num',' if any.'))
  data[['group_code_num']] = haven::zap_labels(data[['group_code_num']])
} 
if (!exists("label_defs", envir = stata2r_env)) stata2r_env$label_defs = list()

label_map_to_apply = stata2r_env$label_defs$`group_label_map`

if (!is.null(label_map_to_apply)) {
  temp_attr_label = attr(data[['group_code_num']], 'label')
  existing_var_label = if (is.null(temp_attr_label) || length(temp_attr_label) == 0) NA_character_ else as.character(temp_attr_label[1])
  stata_tmp_labelled_L43_group_code_num = haven::labelled(data[['group_code_num']], labels = label_map_to_apply, label = existing_var_label)
  data[['group_code_num']] = stata_tmp_labelled_L43_group_code_num
  rm(stata_tmp_labelled_L43_group_code_num)
} else {
  warning(paste0('Label definition `group_label_map` not found for `label values` command on line 43. Labels removed from ', 'group_code_num',' if any.'))
  data[['group_code_num']] = haven::zap_labels(data[['group_code_num']])
}

 44 do:  label variable group_code_num "Numeric code for cleaned group"
 44 r:  attr(data$`group_code_num`, "label") = "Numeric code for cleaned group" 
attr(data$`group_code_num`, "label") = "Numeric code for cleaned group"

 45 do:  decode group_code_num, generate(group_from_decode)
 45 r:  data = dplyr::mutate(data, `group_from_decode` = NA_character_)
## Decode values using haven::as_factor
stata_tmp_source_vector_L45 = data[['group_code_num']]
stata_tmp_decoded_values_L45 = as.character(haven::as_factor(stata_tmp_source_vector_L45))
stata_tmp_decoded_values_L45 = dplyr::if_else(is.na(stata_tmp_decoded_values_L45), dplyr::if_else(is.na(stata_tmp_source_vector_L45), "", as.character(stata_tmp_source_vector_L45)), stata_tmp_decoded_values_L45)
data = dplyr::mutate(data, `group_from_decode` = stata_tmp_decoded_values_L45)
rm(stata_tmp_decoded_values_L45, stata_tmp_source_vector_L45) 
data = dplyr::mutate(data, `group_from_decode` = NA_character_)

## Decode values using haven::as_factor

stata_tmp_source_vector_L45 = data[['group_code_num']]

stata_tmp_decoded_values_L45 = as.character(haven::as_factor(stata_tmp_source_vector_L45))

stata_tmp_decoded_values_L45 = dplyr::if_else(is.na(stata_tmp_decoded_values_L45), dplyr::if_else(is.na(stata_tmp_source_vector_L45), "", as.character(stata_tmp_source_vector_L45)), stata_tmp_decoded_values_L45)

data = dplyr::mutate(data, `group_from_decode` = stata_tmp_decoded_values_L45)

rm(stata_tmp_decoded_values_L45, stata_tmp_source_vector_L45)

 46 do:  recode value2 (0/1=1 "Very Low") (2/4=2 "Low-Mid") (nonmissing=3 "High") (missing = .a), gen(value2_cat_str)
 46 r:  data = dplyr::mutate(data, `value2_cat_str` = as.numeric(dplyr::case_when(
    value2 >= 0 & value2 <= 1 ~ 1,
    value2 >= 2 & value2 <= 4 ~ 2,
    !sfun_missing(value2) ~ 3,
    sfun_missing(value2) ~ NA_real_
  )))
data[['value2_cat_str']] = haven::labelled(data[['value2_cat_str']], labels = stats::setNames(c(1, 2, 3), c("Very Low", "Low-Mid", "High"))) 
data = dplyr::mutate(data, `value2_cat_str` = as.numeric(dplyr::case_when(
    value2 >= 0 & value2 <= 1 ~ 1,
    value2 >= 2 & value2 <= 4 ~ 2,
    !sfun_missing(value2) ~ 3,
    sfun_missing(value2) ~ NA_real_
  )))

data[['value2_cat_str']] = haven::labelled(data[['value2_cat_str']], labels = stats::setNames(c(1, 2, 3), c("Very Low", "Low-Mid", "High")))

 47 do:  recode value2 (0/1=1) (2/4=2) (nonmissing=3) (missing = 99), gen(value2_cat_num)
 47 r:  data = dplyr::mutate(data, `value2_cat_num` = dplyr::case_when(
    value2 >= 0 & value2 <= 1 ~ 1,
    value2 >= 2 & value2 <= 4 ~ 2,
    !sfun_missing(value2) ~ 3,
    sfun_missing(value2) ~ 99
  )) 
data = dplyr::mutate(data, `value2_cat_num` = dplyr::case_when(
    value2 >= 0 & value2 <= 1 ~ 1,
    value2 >= 2 & value2 <= 4 ~ 2,
    !sfun_missing(value2) ~ 3,
    sfun_missing(value2) ~ 99
  ))

 48 do:  sort group_clean value1
 48 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group_clean", "value1", "stata2r_original_order_idx"))) 
data = dplyr::arrange(data, !!!dplyr::syms(c("group_clean", "value1", "stata2r_original_order_idx")))

Error: After Stata line  48 , R data set differs from Stata reference.

Data set from Stata (do_df):
tibble [50 × 43] (S3: tbl_df/tbl/data.frame)
 $ id                    : num [1:50] 8 24 7 14 31 47 49 22 43 25 ...
  ..- attr(*, "label")= chr "id"
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ group_orig            : chr [1:50] "Alpha" "Alpha" "Alpha" "Alpha" ...
  ..- attr(*, "label")= chr "group_orig"
  ..- attr(*, "format.stata")= chr "%6s"
 $ value1                : num [1:50] 30 40.3 62.5 73.7 81 ...
  ..- attr(*, "label")= chr "value1"
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ value2                : num [1:50] 6 3 3 6 4 4 6 3 4 3 ...
  ..- attr(*, "label")= chr "value2"
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ date_str              : chr [1:50] "2022-10-05" "2022-09-25" "2020-07-17" "2020-10-01" ...
  ..- attr(*, "label")= chr "date_str"
  ..- attr(*, "format.stata")= chr "%10s"
 $ num_str               : chr [1:50] "141" "122" "112" "198" ...
  ..- attr(*, "label")= chr "num_str"
  ..- attr(*, "format.stata")= chr "%3s"
 $ num_val_from_str      : num [1:50] 141 122 112 198 193 120 175 147 132 166 ...
  ..- attr(*, "label")= chr "num_str"
  ..- attr(*, "format.stata")= chr "%10.0g"
 $ mixed_var             : chr [1:50] "apple" "55" "apple" "20" ...
  ..- attr(*, "label")= chr "mixed_var"
  ..- attr(*, "format.stata")= chr "%6s"
 $ mixed_val_num         : num [1:50] NA 55 NA 20 55 20 30 42 42 20 ...
  ..- attr(*, "label")= chr "mixed_var"
  ..- attr(*, "format.stata")= chr "%10.0g"
 $ value1_log            : num [1:50] 3 3.29 3.73 3.89 3.99 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ value2_squared        : num [1:50] 36 9 9 36 16 16 36 9 16 9 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ int_value1            : num [1:50] 20 26 41 49 53 62 68 69 74 80 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ rounded_value1        : num [1:50] 20 26.9 41.7 49.1 54 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ random_uniform_draw   : num [1:50] 0.3234 0.338 0.0711 0.3698 0.8597 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ id_plus_value2        : num [1:50] 14 27 10 20 35 51 55 25 47 28 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ group_clean           : chr [1:50] "alpha" "alpha" "alpha" "alpha" ...
  ..- attr(*, "format.stata")= chr "%9s"
 $ group_abbr            : chr [1:50] "alp" "alp" "alp" "alp" ...
  ..- attr(*, "format.stata")= chr "%9s"
 $ contact_info          : chr [1:50] "alpha:141" "alpha:122" "alpha:112" "alpha:198" ...
  ..- attr(*, "format.stata")= chr "%9s"
 $ str_len_group         : num [1:50] 5 5 5 5 5 5 5 5 5 5 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ mean_overall_value1   : num [1:50] 66.8 66.8 66.8 66.8 66.8 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ sd_overall_value1     : num [1:50] 38 38 38 38 38 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ total_value2_by_group : num [1:50] 71 71 71 71 71 71 71 71 71 71 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ median_value1_by_group: num [1:50] 104 104 104 104 104 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ group_numeric_id      : num [1:50] 1 1 1 1 1 1 1 1 1 1 ...
  ..- attr(*, "label")= chr "group(group_clean)"
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ tag_first_in_group    : num [1:50] 0 0 1 0 0 0 0 0 0 0 ...
  ..- attr(*, "label")= chr "tag(group_clean)"
  ..- attr(*, "format.stata")= chr "%8.0g"
 $ count_obs_in_group    : num [1:50] 16 16 16 16 16 16 16 16 16 16 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ rank_value1_in_group  : num [1:50] 1 2 3 4 5 6 7 8 9 10 ...
  ..- attr(*, "label")= chr "rank of (value1)    by group_clean"
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ row_total_v1_v2       : num [1:50] 36 43.3 65.5 79.7 85 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ row_mean_v1_v2        : num [1:50] 18 21.7 32.7 39.9 42.5 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ concat_group_num      : chr [1:50] "alpha141" "alpha122" "alpha112" "alpha198" ...
  ..- attr(*, "format.stata")= chr "%9s"
 $ value2_dev_from_mean  : num [1:50] 1.333 -1.667 -1.667 1.333 -0.667 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ obs_date              : Date[1:50], format: "2022-10-05" "2022-09-25" ...
 $ obs_year              : num [1:50] 2022 2022 2020 2020 2020 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ obs_month             : num [1:50] 10 9 7 10 4 11 7 11 1 4 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ obs_day               : num [1:50] 5 25 17 1 9 2 24 8 17 21 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ obs_quarter           : num [1:50] 251 250 242 243 241 251 242 247 240 241 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ days_since_2021_start : num [1:50] 642 632 -168 -92 -267 670 -161 311 -350 -255 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ is_weekend_day        : num [1:50] 0 1 0 0 0 0 0 0 0 0 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ mixed_var_as_str      : chr [1:50] "" "55" "" "20" ...
  ..- attr(*, "format.stata")= chr "%9s"
 $ group_code_num        : dbl+lbl [1:50] 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2...
   ..@ label       : chr "Numeric code for cleaned group"
   ..@ format.stata: chr "%8.0g"
   ..@ labels      : Named num [1:4] 1 2 3 4
   .. ..- attr(*, "names")= chr [1:4] "alpha" "beta" "gamma" "unknown"
 $ group_from_decode     : chr [1:50] "alpha" "alpha" "alpha" "alpha" ...
  ..- attr(*, "label")= chr "Numeric code for cleaned group"
  ..- attr(*, "format.stata")= chr "%9s"
 $ value2_cat_str        : dbl+lbl [1:50]     3,     2,     2,     3,     2,     2,     3,     2,...
   ..@ label       : chr "RECODE of value2 (value2)"
   ..@ format.stata: chr "%9.0g"
   ..@ labels      : Named num [1:3] 1 2 3
   .. ..- attr(*, "names")= chr [1:3] "Very Low" "Low-Mid" "High"
 $ value2_cat_num        : num [1:50] 3 2 2 3 2 2 3 2 2 2 ...
  ..- attr(*, "label")= chr "RECODE of value2 (value2)"
  ..- attr(*, "format.stata")= chr "%9.0g"
 - attr(*, "label")= chr "Written by R."
NULL

Data set from R (r_df):
tibble [50 × 44] (S3: tbl_df/tbl/data.frame)
 $ id                        : num [1:50] 8 24 7 14 31 47 49 22 43 25 ...
 $ group_orig                : chr [1:50] "Alpha" "Alpha" "Alpha" "Alpha" ...
 $ value1                    : num [1:50] 30 40.3 62.5 73.7 81 ...
 $ value2                    : num [1:50] 6 3 3 6 4 4 6 3 4 3 ...
 $ date_str                  : chr [1:50] "2022-10-05" "2022-09-25" "2020-07-17" "2020-10-01" ...
 $ num_str                   : chr [1:50] "141" "122" "112" "198" ...
 $ mixed_var                 : chr [1:50] "apple" "55" "apple" "20" ...
 $ stata2r_original_order_idx: int [1:50] 8 24 7 14 31 47 49 22 43 25 ...
 $ value1_log                : num [1:50] 3 3.29 3.73 3.89 3.99 ...
 $ value2_squared            : num [1:50] 36 9 9 36 16 16 36 9 16 9 ...
 $ int_value1                : num [1:50] 20 26 41 49 53 62 68 69 74 80 ...
 $ rounded_value1            : num [1:50] 20 26.9 41.7 49.1 54 62.7 68.3 69.1 74.9 80.4 ...
 $ random_uniform_draw       : num [1:50] 0.393 0.795 0.412 0.548 0.787 ...
 $ id_plus_value2            : num [1:50] 14 27 10 20 35 51 55 25 47 28 ...
 $ group_clean               : chr [1:50] "alpha" "alpha" "alpha" "alpha" ...
 $ group_abbr                : chr [1:50] "alp" "alp" "alp" "alp" ...
 $ contact_info              : chr [1:50] "alpha:141" "alpha:122" "alpha:112" "alpha:198" ...
 $ str_len_group             : num [1:50] 5 5 5 5 5 5 5 5 5 5 ...
 $ mean_overall_value1       : num [1:50] 66.8 66.8 66.8 66.8 66.8 ...
 $ sd_overall_value1         : num [1:50] 38 38 38 38 38 ...
 $ total_value2_by_group     : num [1:50] 71 71 71 71 71 71 71 71 71 71 ...
 $ median_value1_by_group    : num [1:50] 104 104 104 104 104 ...
 $ group_numeric_id          : int [1:50] 1 1 1 1 1 1 1 1 1 1 ...
 $ tag_first_in_group        : num [1:50] 0 0 1 0 0 0 0 0 0 0 ...
 $ count_obs_in_group        : int [1:50] 16 16 16 16 16 16 16 16 16 16 ...
 $ rank_value1_in_group      : num [1:50] 1 2 3 4 5 6 7 8 9 10 ...
 $ row_total_v1_v2           : num [1:50] 36 43.3 65.5 79.7 85 ...
 $ row_mean_v1_v2            : num [1:50] 18 21.7 32.7 39.9 42.5 ...
 $ concat_group_num          : chr [1:50] "alpha141" "alpha122" "alpha112" "alpha198" ...
 $ value2_dev_from_mean      : num [1:50] 1.333 -1.667 -1.667 1.333 -0.667 ...
 $ obs_date                  : num [1:50] 22923 22913 22113 22189 22014 ...
 $ obs_year                  : num [1:50] 2022 2022 2020 2020 2020 ...
 $ obs_month                 : num [1:50] 10 9 7 10 4 11 7 11 1 4 ...
 $ obs_day                   : num [1:50] 5 25 17 1 9 2 24 8 17 21 ...
 $ obs_quarter               : num [1:50] 4 3 3 4 2 4 3 4 1 2 ...
 $ days_since_2021_start     : num [1:50] 642 632 -168 -92 -267 670 -161 311 -350 -255 ...
 $ is_weekend_day            : num [1:50] 0 1 0 0 0 0 0 0 0 0 ...
 $ num_val_from_str          : num [1:50] 141 122 112 198 193 120 175 147 132 166 ...
 $ mixed_val_num             : num [1:50] NA 55 NA 20 55 20 30 42 42 20 ...
  ..- attr(*, "problems")= tibble [12 × 4] (S3: tbl_df/tbl/data.frame)
  .. ..$ row     : int [1:12] 1 7 8 16 20 29 32 36 37 38 ...
  .. ..$ col     : int [1:12] NA NA NA NA NA NA NA NA NA NA ...
  .. ..$ expected: chr [1:12] "a number" "a number" "a number" "a number" ...
  .. ..$ actual  : chr [1:12] "apple" "apple" "apple" "banana" ...
 $ mixed_var_as_str          : chr [1:50] "" "55" "" "20" ...
 $ group_code_num            : int+lbl [1:50] 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2...
   ..@ labels: Named int [1:4] 1 2 3 4
   .. ..- attr(*, "names")= chr [1:4] "alpha" "beta" "gamma" "unknown"
   ..@ label : chr "Numeric code for cleaned group"
 $ group_from_decode         : chr [1:50] "alpha" "alpha" "alpha" "alpha" ...
 $ value2_cat_str            : dbl+lbl [1:50]  3,  2,  2,  3,  2,  2,  3,  2,  2,  2,  3,  3,  3, NA,...
   ..@ labels: Named num [1:3] 1 2 3
   .. ..- attr(*, "names")= chr [1:3] "Very Low" "Low-Mid" "High"
 $ value2_cat_num            : num [1:50] 3 2 2 3 2 2 3 2 2 2 ...
NULL

Differences:List of 2
 $ identical     : logi FALSE
 $ value_mismatch:'data.frame':	80 obs. of  4 variables:
  ..$ row      : int [1:80] 35 36 46 47 35 36 46 47 35 36 ...
  ..$ column   : chr [1:80] "id" "id" "id" "id" ...
  ..$ df1_value: chr [1:80] "50" "6" "12" "2" ...
  ..$ df2_value: chr [1:80] "6" "50" "2" "12" ...
NULL
