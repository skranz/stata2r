In total 2 of 3 tests failed.


---
Outcome of test 'source_r': ok
All R files could be sourced.



---
Outcome of test 'do1': not ok


Details:

cmd_df = do_parse(do_code)
cmd_df = mark_data_manip_cmd(cmd_df)

str(cmd_df)
'data.frame':	38 obs. of  10 variables:
 $ line                   : int  1 2 3 4 5 6 7 8 9 10 ...
 $ do_code                : chr  "use \"data.dta\", clear" "sort group i" "keep in 1/39" "list in 1/5" ...
 $ stata_cmd_original     : chr  "use" "sort" "keep" "list" ...
 $ stata_cmd              : chr  "use" "sort" "keep" "list" ...
 $ rest_of_cmd            : chr  "\"data.dta\", clear" "group i" "in 1/39" "in 1/5" ...
 $ is_by_prefix           : logi  FALSE FALSE FALSE FALSE FALSE TRUE ...
 $ by_group_vars          : chr  NA NA NA NA ...
 $ by_sort_vars           : chr  NA NA NA NA ...
 $ stata_translation_error: chr  NA NA NA NA ...
 $ do_translate           : logi  TRUE TRUE TRUE FALSE FALSE TRUE ...
NULL

---
#Translate Stata to R commands... ... translation done.
---
# Run translated R commands and compare results


 1 do:  use "data.dta", clear
 1 r:  data = haven::read_dta(file.path(stata2r_env$working_dir, "data.dta")) %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used 
data = haven::read_dta(file.path(stata2r_env$working_dir, "data.dta")) %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used

 2 do:  sort group i
 2 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group", "i"))) 
data = dplyr::arrange(data, !!!dplyr::syms(c("group", "i")))

 3 do:  keep in 1/39
 3 r:  data = dplyr::slice(data, 1:39) 
data = dplyr::slice(data, 1:39)

 4 do:  list in 1/5 

 4 r:  not translated since not flagged as data manipulation

 5 do:  display _n 

 5 r:  not translated since not flagged as data manipulation

 6 do:  by group: gen seq = _n
 6 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group")))
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`seq` = as.numeric(dplyr::row_number())) %>% 
  dplyr::ungroup() 
data = dplyr::arrange(data, !!!dplyr::syms(c("group")))

data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`seq` = as.numeric(dplyr::row_number())) %>% 
  dplyr::ungroup()

 7 do:  gen logi = log(i)
 7 r:  data = data %>% 
  dplyr::mutate(`logi` = log(i)) 
data = data %>% 
  dplyr::mutate(`logi` = log(i))

 8 do:  gen sqrt_i = sqrt(i)
 8 r:  data = data %>% 
  dplyr::mutate(`sqrt_i` = sqrt(i)) 
data = data %>% 
  dplyr::mutate(`sqrt_i` = sqrt(i))

 9 do:  gen group_num = cond(group=="A",1,cond(group=="B",2,3))
 9 r:  data = data %>% 
  dplyr::mutate(`group_num` = as.numeric(dplyr::if_else(group=="A", 1, dplyr::if_else(group=="B", 2, 3)))) 
data = data %>% 
  dplyr::mutate(`group_num` = as.numeric(dplyr::if_else(group=="A", 1, dplyr::if_else(group=="B", 2, 3))))

 10 do:  egen mean_i_grp = mean(i), by(group)
 10 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`mean_i_grp` = mean(i, na.rm = TRUE)) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`mean_i_grp` = mean(i, na.rm = TRUE)) %>% 
  dplyr::ungroup()

 11 do:  egen total_i = total(i)
 11 r:  data = data %>% 
  dplyr::mutate(`total_i` = sum(i, na.rm = TRUE)) 
data = data %>% 
  dplyr::mutate(`total_i` = sum(i, na.rm = TRUE))

 12 do:  bysort group: egen rank_i = rank(i)
 12 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group")))
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`rank_i` = base::rank(i, ties.method = 'average', na.last = 'keep')) %>% 
  dplyr::ungroup() %>% 
  dplyr::arrange(stata2r_original_order_idx) 
data = dplyr::arrange(data, !!!dplyr::syms(c("group")))

data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`rank_i` = base::rank(i, ties.method = 'average', na.last = 'keep')) %>% 
  dplyr::ungroup() %>% 
  dplyr::arrange(stata2r_original_order_idx)

Error: After Stata line  12 , R data set differs from Stata reference.

Data set from Stata (do_df):
tibble [39 × 9] (S3: tbl_df/tbl/data.frame)
 $ i         : num [1:39] 10 13 16 19 20 21 22 27 31 34 ...
  ..- attr(*, "label")= chr "i"
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ group     : chr [1:39] "A" "A" "A" "A" ...
  ..- attr(*, "label")= chr "group"
  ..- attr(*, "format.stata")= chr "%1s"
 $ seq       : num [1:39] 1 2 3 4 5 6 7 8 9 10 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ logi      : num [1:39] 2.3 2.56 2.77 2.94 3 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ sqrt_i    : num [1:39] 3.16 3.61 4 4.36 4.47 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ group_num : num [1:39] 1 1 1 1 1 1 1 1 1 1 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ mean_i_grp: num [1:39] 25.3 25.3 25.3 25.3 25.3 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ total_i   : num [1:39] 782 782 782 782 782 782 782 782 782 782 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ rank_i    : num [1:39] 1 2 3 4 5 6 7 8 9 10 ...
  ..- attr(*, "label")= chr "rank of (i)    by group"
  ..- attr(*, "format.stata")= chr "%9.0g"
 - attr(*, "label")= chr "Written by R."
NULL

Data set from R (r_df):
tibble [39 × 10] (S3: tbl_df/tbl/data.frame)
 $ i                         : num [1:39] 1 2 3 4 5 6 7 8 9 10 ...
  ..- attr(*, "label")= chr "i"
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ group                     : chr [1:39] "C" "C" "C" "B" ...
  ..- attr(*, "label")= chr "group"
  ..- attr(*, "format.stata")= chr "%1s"
 $ stata2r_original_order_idx: int [1:39] 1 2 3 4 5 6 7 8 9 10 ...
 $ seq                       : num [1:39] 1 2 3 1 4 2 3 4 5 1 ...
 $ logi                      : num [1:39] 0 0.693 1.099 1.386 1.609 ...
  ..- attr(*, "label")= chr "i"
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ sqrt_i                    : num [1:39] 1 1.41 1.73 2 2.24 ...
  ..- attr(*, "label")= chr "i"
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ group_num                 : num [1:39] 3 3 3 2 3 2 2 2 3 1 ...
 $ mean_i_grp                : num [1:39] 17.6 17.6 17.6 17.2 17.6 ...
 $ total_i                   : num [1:39] 782 782 782 782 782 782 782 782 782 782 ...
 $ rank_i                    : num [1:39] 1 2 3 1 4 2 3 4 5 1 ...
NULL

Differences:List of 2
 $ identical     : logi FALSE
 $ value_mismatch:'data.frame':	40 obs. of  4 variables:
  ..$ row      : int [1:40] 1 2 3 4 5 1 2 3 4 5 ...
  ..$ column   : chr [1:40] "i" "i" "i" "i" ...
  ..$ df1_value: chr [1:40] "10" "13" "16" "19" ...
  ..$ df2_value: chr [1:40] "1" "2" "3" "4" ...
NULL


---
Outcome of test 'do2': not ok


Details:

cmd_df = do_parse(do_code)
cmd_df = mark_data_manip_cmd(cmd_df)

str(cmd_df)
'data.frame':	82 obs. of  10 variables:
 $ line                   : int  1 2 3 4 5 6 7 8 9 10 ...
 $ do_code                : chr  "use \"test_data.dta\", clear" "generate value1_log = log(value1)" "generate value2_squared = value2^2" "generate int_value1 = int(value1) if !missing(value1)" ...
 $ stata_cmd_original     : chr  "use" "generate" "generate" "generate" ...
 $ stata_cmd              : chr  "use" "generate" "generate" "generate" ...
 $ rest_of_cmd            : chr  "\"test_data.dta\", clear" "value1_log = log(value1)" "value2_squared = value2^2" "int_value1 = int(value1) if !missing(value1)" ...
 $ is_by_prefix           : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...
 $ by_group_vars          : chr  NA NA NA NA ...
 $ by_sort_vars           : chr  NA NA NA NA ...
 $ stata_translation_error: chr  NA NA NA NA ...
 $ do_translate           : logi  TRUE TRUE TRUE TRUE TRUE TRUE ...
NULL

---
#Translate Stata to R commands... ... translation done.
---
# Run translated R commands and compare results


 1 do:  use "test_data.dta", clear
 1 r:  data = haven::read_dta(file.path(stata2r_env$working_dir, "test_data.dta")) %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used 
data = haven::read_dta(file.path(stata2r_env$working_dir, "test_data.dta")) %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used

 2 do:  generate value1_log = log(value1)
 2 r:  data = data %>% 
  dplyr::mutate(`value1_log` = log(value1)) 
data = data %>% 
  dplyr::mutate(`value1_log` = log(value1))

 3 do:  generate value2_squared = value2^2
 3 r:  data = data %>% 
  dplyr::mutate(`value2_squared` = value2^2) 
data = data %>% 
  dplyr::mutate(`value2_squared` = value2^2)

 4 do:  generate int_value1 = int(value1) if !missing(value1)
 4 r:  data = data %>% 
  dplyr::mutate(`int_value1` = dplyr::if_else(dplyr::coalesce(!is.na(value1), FALSE), trunc(value1), NA_real_)) 
data = data %>% 
  dplyr::mutate(`int_value1` = dplyr::if_else(dplyr::coalesce(!is.na(value1), FALSE), trunc(value1), NA_real_))

 5 do:  generate rounded_value1 = round(value1, 0.1) if !missing(value1)
 5 r:  data = data %>% 
  dplyr::mutate(`rounded_value1` = dplyr::if_else(dplyr::coalesce(!is.na(value1), FALSE), sfun_stata_round(value1,  0.1), NA_real_)) 
data = data %>% 
  dplyr::mutate(`rounded_value1` = dplyr::if_else(dplyr::coalesce(!is.na(value1), FALSE), sfun_stata_round(value1,  0.1), NA_real_))

 6 do:  generate random_uniform_draw = runiform()
 6 r:  data = data %>% 
  dplyr::mutate(`random_uniform_draw` = stats::runif(as.numeric(dplyr::n()))) 
data = data %>% 
  dplyr::mutate(`random_uniform_draw` = stats::runif(as.numeric(dplyr::n())))

 7 do:  generate id_plus_value2 = id + value2 if value2 < 7 & !missing(value2)
 7 r:  data = data %>% 
  dplyr::mutate(`id_plus_value2` = dplyr::if_else(dplyr::coalesce(value2 < 7 & !is.na(value2), FALSE), sfun_stata_add(id, value2), NA_real_)) 
data = data %>% 
  dplyr::mutate(`id_plus_value2` = dplyr::if_else(dplyr::coalesce(value2 < 7 & !is.na(value2), FALSE), sfun_stata_add(id, value2), NA_real_))

 8 do:  replace value1_log = 0 if missing(value1_log) & !missing(value1)
 8 r:  data = data %>% 
  dplyr::mutate(`value1_log` = dplyr::if_else(dplyr::coalesce(is.na(value1_log) & !is.na(value1), FALSE), 0, data$`value1_log`)) 
data = data %>% 
  dplyr::mutate(`value1_log` = dplyr::if_else(dplyr::coalesce(is.na(value1_log) & !is.na(value1), FALSE), 0, data$`value1_log`))

 9 do:  replace value1 = value1 * 1.5 if group_orig == "Alpha" & !missing(value1) & !missing(group_orig)
 9 r:  data = data %>% 
  dplyr::mutate(`value1` = dplyr::if_else(dplyr::coalesce(group_orig == "Alpha" & !is.na(value1) & !is.na(group_orig), FALSE), value1 * 1.5, data$`value1`)) 
data = data %>% 
  dplyr::mutate(`value1` = dplyr::if_else(dplyr::coalesce(group_orig == "Alpha" & !is.na(value1) & !is.na(group_orig), FALSE), value1 * 1.5, data$`value1`))

 10 do:  gen group_clean = strtrim(stritrim(lower(group_orig)))
 10 r:  data = data %>% 
  dplyr::mutate(`group_clean` = stringi::stri_trim_both(sfun_stritrim(stringi::stri_trans_tolower(group_orig)))) 
data = data %>% 
  dplyr::mutate(`group_clean` = stringi::stri_trim_both(sfun_stritrim(stringi::stri_trans_tolower(group_orig))))

 11 do:  replace group_clean = "unknown" if missing(group_clean)
 11 r:  data = data %>% 
  dplyr::mutate(`group_clean` = dplyr::if_else(dplyr::coalesce(is.na(group_clean), FALSE), "unknown", data$`group_clean`)) 
data = data %>% 
  dplyr::mutate(`group_clean` = dplyr::if_else(dplyr::coalesce(is.na(group_clean), FALSE), "unknown", data$`group_clean`))

 12 do:  gen group_abbr = substr(group_clean, 1, 3) if group_clean != "unknown"
 12 r:  data = data %>% 
  dplyr::mutate(`group_abbr` = dplyr::if_else(dplyr::coalesce(group_clean != "unknown", FALSE), stringi::stri_sub(group_clean, from =  1, length =  3), NA_character_)) 
data = data %>% 
  dplyr::mutate(`group_abbr` = dplyr::if_else(dplyr::coalesce(group_clean != "unknown", FALSE), stringi::stri_sub(group_clean, from =  1, length =  3), NA_character_))

 13 do:  gen contact_info = group_clean + ":" + num_str
 13 r:  data = data %>% 
  dplyr::mutate(`contact_info` = sfun_stata_add(sfun_stata_add(group_clean, ":"), num_str)) 
data = data %>% 
  dplyr::mutate(`contact_info` = sfun_stata_add(sfun_stata_add(group_clean, ":"), num_str))

 14 do:  gen str_len_group = strlen(group_clean)
 14 r:  data = data %>% 
  dplyr::mutate(`str_len_group` = stringi::stri_length(group_clean)) 
data = data %>% 
  dplyr::mutate(`str_len_group` = stringi::stri_length(group_clean))

 15 do:  replace contact_info = subinstr(contact_info, "beta", "delta", 1) if strpos(contact_info, "beta") > 0
 15 r:  data = data %>% 
  dplyr::mutate(`contact_info` = dplyr::if_else(dplyr::coalesce(sfun_strpos(contact_info,  "beta") > 0, FALSE), sfun_subinstr(contact_info,  "beta",  "delta",  1), data$`contact_info`)) 
data = data %>% 
  dplyr::mutate(`contact_info` = dplyr::if_else(dplyr::coalesce(sfun_strpos(contact_info,  "beta") > 0, FALSE), sfun_subinstr(contact_info,  "beta",  "delta",  1), data$`contact_info`))

 16 do:  egen mean_overall_value1 = mean(value1)
 16 r:  data = data %>% 
  dplyr::mutate(`mean_overall_value1` = mean(value1, na.rm = TRUE)) 
data = data %>% 
  dplyr::mutate(`mean_overall_value1` = mean(value1, na.rm = TRUE))

 17 do:  egen sd_overall_value1 = sd(value1)
 17 r:  data = data %>% 
  dplyr::mutate(`sd_overall_value1` = stats::sd(value1, na.rm = TRUE)) 
data = data %>% 
  dplyr::mutate(`sd_overall_value1` = stats::sd(value1, na.rm = TRUE))

 18 do:  egen total_value2_by_group = total(value2), by(group_clean)
 18 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`total_value2_by_group` = sum(value2, na.rm = TRUE)) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`total_value2_by_group` = sum(value2, na.rm = TRUE)) %>% 
  dplyr::ungroup()

 19 do:  egen median_value1_by_group = median(value1), by(group_clean)
 19 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`median_value1_by_group` = stats::median(value1, na.rm = TRUE)) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`median_value1_by_group` = stats::median(value1, na.rm = TRUE)) %>% 
  dplyr::ungroup()

 20 do:  egen group_numeric_id = group(group_clean)
 20 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group_clean")))
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`group_numeric_id` = dplyr::cur_group_id()) %>% 
  dplyr::ungroup() %>% 
  dplyr::arrange(stata2r_original_order_idx) 
data = dplyr::arrange(data, !!!dplyr::syms(c("group_clean")))

data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`group_numeric_id` = dplyr::cur_group_id()) %>% 
  dplyr::ungroup() %>% 
  dplyr::arrange(stata2r_original_order_idx)

 21 do:  egen tag_first_in_group = tag(group_clean)
 21 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group_clean")))
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`tag_first_in_group` = as.numeric(dplyr::row_number() == 1)) %>% 
  dplyr::ungroup() %>% 
  dplyr::arrange(stata2r_original_order_idx) 
data = dplyr::arrange(data, !!!dplyr::syms(c("group_clean")))

data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`tag_first_in_group` = as.numeric(dplyr::row_number() == 1)) %>% 
  dplyr::ungroup() %>% 
  dplyr::arrange(stata2r_original_order_idx)

 22 do:  egen count_obs_in_group = count(id), by(group_clean)
 22 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`count_obs_in_group` = sum(!is.na(id))) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`count_obs_in_group` = sum(!is.na(id))) %>% 
  dplyr::ungroup()

 23 do:  egen rank_value1_in_group = rank(value1), by(group_clean) fieldstrustmissings
 23 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group_clean", "value1")))
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`rank_value1_in_group` = base::rank(value1, ties.method = 'average', na.last = TRUE)) %>% 
  dplyr::ungroup() %>% 
  dplyr::arrange(stata2r_original_order_idx) 
data = dplyr::arrange(data, !!!dplyr::syms(c("group_clean", "value1")))

data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group_clean"))) %>% 
  dplyr::mutate(`rank_value1_in_group` = base::rank(value1, ties.method = 'average', na.last = TRUE)) %>% 
  dplyr::ungroup() %>% 
  dplyr::arrange(stata2r_original_order_idx)

Error: After Stata line  23 , R data set differs from Stata reference.

Data set from Stata (do_df):
tibble [50 × 24] (S3: tbl_df/tbl/data.frame)
 $ id                    : num [1:50] 1 2 3 4 5 6 7 8 9 10 ...
  ..- attr(*, "label")= chr "id"
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ group_orig            : chr [1:50] " Gamma" " Gamma" "Beta" "Beta" ...
  ..- attr(*, "label")= chr "group_orig"
  ..- attr(*, "format.stata")= chr "%6s"
 $ value1                : num [1:50] 73.9 NA 52.8 29.8 44.2 ...
  ..- attr(*, "label")= chr "value1"
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ value2                : num [1:50] 4 3 NA 10 3 2 3 6 6 8 ...
  ..- attr(*, "label")= chr "value2"
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ date_str              : chr [1:50] "2020-09-21" "2022-08-26" "2022-02-09" "2021-05-20" ...
  ..- attr(*, "label")= chr "date_str"
  ..- attr(*, "format.stata")= chr "%10s"
 $ num_str               : chr [1:50] "166" "181" "101" "136" ...
  ..- attr(*, "label")= chr "num_str"
  ..- attr(*, "format.stata")= chr "%3s"
 $ mixed_var             : chr [1:50] "apple" "42" "10" "20" ...
  ..- attr(*, "label")= chr "mixed_var"
  ..- attr(*, "format.stata")= chr "%6s"
 $ value1_log            : num [1:50] 4.3 NA 3.97 3.39 3.79 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ value2_squared        : num [1:50] 16 9 NA 100 9 4 9 36 36 64 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ int_value1            : num [1:50] 73 NA 52 29 44 NA 41 20 31 70 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ rounded_value1        : num [1:50] 73.9 NA 52.8 29.8 44.2 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ random_uniform_draw   : num [1:50] 0.3489 0.2669 0.1366 0.0286 0.8689 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ id_plus_value2        : num [1:50] 5 5 NA NA 8 8 10 14 15 NA ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ group_clean           : chr [1:50] "gamma" "gamma" "beta" "beta" ...
  ..- attr(*, "format.stata")= chr "%9s"
 $ group_abbr            : chr [1:50] "gam" "gam" "bet" "bet" ...
  ..- attr(*, "format.stata")= chr "%9s"
 $ contact_info          : chr [1:50] "gamma:166" "gamma:181" "delta:101" "delta:136" ...
  ..- attr(*, "format.stata")= chr "%9s"
 $ str_len_group         : num [1:50] 5 5 4 4 5 4 5 5 4 5 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ mean_overall_value1   : num [1:50] 66.8 66.8 66.8 66.8 66.8 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ sd_overall_value1     : num [1:50] 38 38 38 38 38 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ total_value2_by_group : num [1:50] 49 49 86 86 49 86 71 71 86 49 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ median_value1_by_group: num [1:50] 44.2 44.2 47.3 47.3 44.2 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ group_numeric_id      : num [1:50] 3 3 2 2 3 2 1 1 2 3 ...
  ..- attr(*, "label")= chr "group(group_clean)"
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ tag_first_in_group    : num [1:50] 1 0 1 0 0 0 1 0 0 0 ...
  ..- attr(*, "label")= chr "tag(group_clean)"
  ..- attr(*, "format.stata")= chr "%8.0g"
 $ count_obs_in_group    : num [1:50] 11 11 20 20 11 20 16 16 20 11 ...
  ..- attr(*, "format.stata")= chr "%9.0g"
 - attr(*, "label")= chr "Written by R."
NULL

Data set from R (r_df):
tibble [50 × 26] (S3: tbl_df/tbl/data.frame)
 $ id                        : num [1:50] 1 2 3 4 5 6 7 8 9 10 ...
  ..- attr(*, "label")= chr "id"
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ group_orig                : chr [1:50] " Gamma" " Gamma" "Beta" "Beta" ...
  ..- attr(*, "label")= chr "group_orig"
  ..- attr(*, "format.stata")= chr "%6s"
 $ value1                    : num [1:50] 73.9 NA 52.8 29.8 44.2 ...
 $ value2                    : num [1:50] 4 3 NA 10 3 2 3 6 6 8 ...
  ..- attr(*, "label")= chr "value2"
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ date_str                  : chr [1:50] "2020-09-21" "2022-08-26" "2022-02-09" "2021-05-20" ...
  ..- attr(*, "label")= chr "date_str"
  ..- attr(*, "format.stata")= chr "%10s"
 $ num_str                   : chr [1:50] "166" "181" "101" "136" ...
  ..- attr(*, "label")= chr "num_str"
  ..- attr(*, "format.stata")= chr "%3s"
 $ mixed_var                 : chr [1:50] "apple" "42" "10" "20" ...
  ..- attr(*, "label")= chr "mixed_var"
  ..- attr(*, "format.stata")= chr "%6s"
 $ stata2r_original_order_idx: int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
 $ value1_log                : num [1:50] 4.3 NA 3.97 3.39 3.79 ...
 $ value2_squared            : num [1:50] 16 9 NA 100 9 4 9 36 36 64 ...
  ..- attr(*, "label")= chr "value2"
  ..- attr(*, "format.stata")= chr "%9.0g"
 $ int_value1                : num [1:50] 73 NA 52 29 44 NA 41 20 31 70 ...
 $ rounded_value1            : num [1:50] 73.9 NA 52.8 29.8 44.2 NA 41.7 20 31.9 70.1 ...
 $ random_uniform_draw       : num [1:50] 0.866 0.6329 0.0252 0.6359 0.2547 ...
 $ id_plus_value2            : num [1:50] 5 5 NA NA 8 8 10 14 15 NA ...
 $ group_clean               : chr [1:50] "gamma" "gamma" "beta" "beta" ...
 $ group_abbr                : chr [1:50] "gam" "gam" "bet" "bet" ...
 $ contact_info              : chr [1:50] "gamma:166" "gamma:181" "delta:101" "delta:136" ...
 $ str_len_group             : int [1:50] 5 5 4 4 5 4 5 5 4 5 ...
 $ mean_overall_value1       : num [1:50] 66.8 66.8 66.8 66.8 66.8 ...
 $ sd_overall_value1         : num [1:50] 38 38 38 38 38 ...
 $ total_value2_by_group     : num [1:50] 49 49 86 86 49 86 71 71 86 49 ...
 $ median_value1_by_group    : num [1:50] 44.2 44.2 47.3 47.3 44.2 ...
 $ group_numeric_id          : int [1:50] 3 3 2 2 3 2 1 1 2 3 ...
 $ tag_first_in_group        : num [1:50] 1 0 1 0 0 0 1 0 0 0 ...
 $ count_obs_in_group        : int [1:50] 11 11 20 20 11 20 16 16 20 11 ...
 $ rank_value1_in_group      : num [1:50] 8 10 12 4 5 19 3 1 5 7 ...
NULL

Differences:List of 2
 $ identical      : logi FALSE
 $ column_mismatch:List of 2
  ..$ missing_in_do_df: chr "rank_value1_in_group"
  ..$ missing_in_r_df : chr(0) 
NULL
