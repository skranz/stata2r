In total 1 of 2 tests failed.


---
Outcome of test 'source_r': ok
All R files could be sourced.



---
Outcome of test 'do1': not ok


Details:

cmd_df = do_parse(do_code)
cmd_df = mark_data_manip_cmd(cmd_df)

str(cmd_df)
'data.frame':	38 obs. of  13 variables:
 $ line                   : int  1 2 3 4 5 6 7 8 9 10 ...
 $ do_code                : chr  "use \"data.dta\", clear" "sort group i" "keep in 1/39" "list in 1/5" ...
 $ stata_cmd_original     : chr  "use" "sort" "keep" "list" ...
 $ stata_cmd              : chr  "use" "sort" "keep" "list" ...
 $ rest_of_cmd            : chr  "\"data.dta\", clear" "group i" "in 1/39" "in 1/5" ...
 $ is_by_prefix           : logi  FALSE FALSE FALSE FALSE FALSE TRUE ...
 $ by_group_vars          : chr  "" "" "" "" ...
 $ by_sort_vars           : chr  "" "" "" "" ...
 $ is_quietly_prefix      : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...
 $ stata_translation_error: chr  NA NA NA NA ...
 $ e_results_needed       :List of 38
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..- attr(*, "class")= chr "AsIs"
 $ r_results_needed       :List of 38
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..$ : chr 
  ..- attr(*, "class")= chr "AsIs"
 $ do_translate           : logi  TRUE TRUE TRUE FALSE FALSE TRUE ...
NULL

---
#Translate Stata to R commands... ... translation done.
---
# Run translated R commands and compare results


 1 do:  use "data.dta", clear
 1 r:  data = haven::read_dta(file.path(stata2r_env$working_dir, "data.dta")) %>% 
  sfun_strip_stata_attributes() %>% 
  sfun_normalize_string_nas() %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used 
data = haven::read_dta(file.path(stata2r_env$working_dir, "data.dta")) %>% 
  sfun_strip_stata_attributes() %>% 
  sfun_normalize_string_nas() %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used

 2 do:  sort group i
 2 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group", "i", "stata2r_original_order_idx"))) 
data = dplyr::arrange(data, !!!dplyr::syms(c("group", "i", "stata2r_original_order_idx")))

 3 do:  keep in 1/39
 3 r:  data = dplyr::slice(data, 1:39) 
data = dplyr::slice(data, 1:39)

 4 do:  list in 1/5 

 4 r:  not translated since not flagged as data manipulation

 5 do:  display _n 

 5 r:  not translated since not flagged as data manipulation

 6 do:  by group: gen seq = _n
 6 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`seq` = as.numeric(dplyr::row_number())) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`seq` = as.numeric(dplyr::row_number())) %>% 
  dplyr::ungroup()

 7 do:  gen logi = log(i)
 7 r:  data = data %>% 
  dplyr::mutate(`logi` = as.numeric(log(`i`))) 
data = data %>% 
  dplyr::mutate(`logi` = as.numeric(log(`i`)))

 8 do:  gen sqrt_i = sqrt(i)
 8 r:  data = data %>% 
  dplyr::mutate(`sqrt_i` = as.numeric(sqrt(`i`))) 
data = data %>% 
  dplyr::mutate(`sqrt_i` = as.numeric(sqrt(`i`)))

 9 do:  gen group_num = cond(group=="A",1,cond(group=="B",2,3))
 9 r:  data = data %>% 
  dplyr::mutate(`group_num` = as.numeric(sfun_stata_cond(`group`=="A", 1, sfun_stata_cond(`group`=="B", 2, 3)))) 
data = data %>% 
  dplyr::mutate(`group_num` = as.numeric(sfun_stata_cond(`group`=="A", 1, sfun_stata_cond(`group`=="B", 2, 3))))

 10 do:  egen mean_i_grp = mean(i), by(group)
 10 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`mean_i_grp` = mean(`i`, na.rm = TRUE)) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`mean_i_grp` = mean(`i`, na.rm = TRUE)) %>% 
  dplyr::ungroup()

 11 do:  egen total_i = total(i)
 11 r:  data = data %>% 
  dplyr::mutate(`total_i` = sum(`i`, na.rm = TRUE)) 
data = data %>% 
  dplyr::mutate(`total_i` = sum(`i`, na.rm = TRUE))

 12 do:  bysort group: egen rank_i = rank(i)
 12 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`rank_i` = as.numeric(base::rank(`i`, ties.method = 'average', na.last = 'keep'))) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`rank_i` = as.numeric(base::rank(`i`, ties.method = 'average', na.last = 'keep'))) %>% 
  dplyr::ungroup()

 13 do:  gen flag = (i>20) if group=="A"
 13 r:  data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else((dplyr::coalesce(as.numeric(`group`=="A"), 0) != 0), as.numeric((`i`>20)), NA_real_)) 
data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else((dplyr::coalesce(as.numeric(`group`=="A"), 0) != 0), as.numeric((`i`>20)), NA_real_))

 14 do:  replace flag = 0 if missing(flag)
 14 r:  data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else((dplyr::coalesce(as.numeric(sfun_missing(`flag`)), 0) != 0), as.numeric(0), data$`flag`)) 
data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else((dplyr::coalesce(as.numeric(sfun_missing(`flag`)), 0) != 0), as.numeric(0), data$`flag`))

 15 do:  keep if flag==1 | group=="B"
 15 r:  data = dplyr::filter(data, (dplyr::coalesce(as.numeric(`flag`==1 | `group`=="B"), 0) != 0)) 
data = dplyr::filter(data, (dplyr::coalesce(as.numeric(`flag`==1 | `group`=="B"), 0) != 0))

 16 do:  drop if i>35
 16 r:  data = dplyr::filter(data, !(dplyr::coalesce(as.numeric(`i`>35), 0) != 0)) 
data = dplyr::filter(data, !(dplyr::coalesce(as.numeric(`i`>35), 0) != 0))

 17 do:  collapse (mean) i (sum) total_i_sum = i, by(group)
 17 r:  data = data %>% 
  collapse::fgroup_by(group) %>% 
  collapse::fsummarise(`i` = collapse::fmean(`i`, na.rm = TRUE),
  `total_i_sum` = collapse::fsum(`i`, na.rm = TRUE)) %>% 
  collapse::fungroup() 
data = data %>% 
  collapse::fgroup_by(group) %>% 
  collapse::fsummarise(`i` = collapse::fmean(`i`, na.rm = TRUE),
  `total_i_sum` = collapse::fsum(`i`, na.rm = TRUE)) %>% 
  collapse::fungroup()

 18 do:  rename i mean_i_overall
 18 r:  data = collapse::frename(data, `i` = `mean_i_overall`) 
data = collapse::frename(data, `i` = `mean_i_overall`)

 19 do:  expand 2 if group=="C"
 19 r:  stata_tmp_expand_n_values_L19 = 2
stata_tmp_expand_cond_values_L19 = (dplyr::coalesce(as.numeric(with(data, `group`=="C")), 0) != 0)
stata_tmp_final_expand_times_L19 = ifelse(stata_tmp_expand_cond_values_L19, ifelse(is.na(stata_tmp_expand_n_values_L19), 1, pmax(0, as.integer(stata_tmp_expand_n_values_L19))), 1)
data = data[base::rep(1:NROW(data), times = stata_tmp_final_expand_times_L19), ]
data = dplyr::as_tibble(data)
if (exists('stata_tmp_expand_n_values_L19')) rm(stata_tmp_expand_n_values_L19, stata_tmp_expand_cond_values_L19, stata_tmp_final_expand_times_L19) 
stata_tmp_expand_n_values_L19 = 2

stata_tmp_expand_cond_values_L19 = (dplyr::coalesce(as.numeric(with(data, `group`=="C")), 0) != 0)

stata_tmp_final_expand_times_L19 = ifelse(stata_tmp_expand_cond_values_L19, ifelse(is.na(stata_tmp_expand_n_values_L19), 1, pmax(0, as.integer(stata_tmp_expand_n_values_L19))), 1)

data = data[base::rep(1:NROW(data), times = stata_tmp_final_expand_times_L19), ]

data = dplyr::as_tibble(data)

if (exists('stata_tmp_expand_n_values_L19')) rm(stata_tmp_expand_n_values_L19, stata_tmp_expand_cond_values_L19, stata_tmp_final_expand_times_L19)

 20 do:  duplicates drop
 20 r:  ## Calculate duplicate flag based on all variables
stata_tmp_is_duplicate_L20 = base::duplicated(data, fromLast = FALSE)
data = dplyr::filter(data, !(stata_tmp_is_duplicate_L20 & TRUE))
rm(stata_tmp_is_duplicate_L20) 
## Calculate duplicate flag based on all variables

stata_tmp_is_duplicate_L20 = base::duplicated(data, fromLast = FALSE)

data = dplyr::filter(data, !(stata_tmp_is_duplicate_L20 & TRUE))

rm(stata_tmp_is_duplicate_L20)

 21 do:  encode group, gen(group_code)
 21 r:  data = dplyr::mutate(data, `group_code` = NA_integer_)
temp_source_vector_L21 = data[['group']]
temp_unique_values_L21 = base::sort(base::unique(temp_source_vector_L21[!is.na(temp_source_vector_L21)]))
temp_numeric_values_L21 = base::match(temp_source_vector_L21, temp_unique_values_L21)
temp_labels_vector_L21 = stats::setNames(as.numeric(1:length(temp_unique_values_L21)), temp_unique_values_L21)
stata_tmp_encoded_full_L21 = haven::labelled(as.integer(temp_numeric_values_L21), labels = temp_labels_vector_L21)
rm(temp_source_vector_L21, temp_unique_values_L21, temp_numeric_values_L21, temp_labels_vector_L21)
data[['group_code']] = stata_tmp_encoded_full_L21
rm(stata_tmp_encoded_full_L21) 
data = dplyr::mutate(data, `group_code` = NA_integer_)

temp_source_vector_L21 = data[['group']]

temp_unique_values_L21 = base::sort(base::unique(temp_source_vector_L21[!is.na(temp_source_vector_L21)]))

temp_numeric_values_L21 = base::match(temp_source_vector_L21, temp_unique_values_L21)

temp_labels_vector_L21 = stats::setNames(as.numeric(1:length(temp_unique_values_L21)), temp_unique_values_L21)

stata_tmp_encoded_full_L21 = haven::labelled(as.integer(temp_numeric_values_L21), labels = temp_labels_vector_L21)

rm(temp_source_vector_L21, temp_unique_values_L21, temp_numeric_values_L21, temp_labels_vector_L21)

data[['group_code']] = stata_tmp_encoded_full_L21

rm(stata_tmp_encoded_full_L21)

 22 do:  decode group_code, gen(group_str)
 22 r:  data = dplyr::mutate(data, `group_str` = NA_character_)
## Decode values using haven::as_factor
stata_tmp_source_vector_L22 = data[['group_code']]
stata_tmp_decoded_values_L22 = as.character(haven::as_factor(stata_tmp_source_vector_L22))
stata_tmp_decoded_values_L22 = dplyr::if_else(is.na(stata_tmp_decoded_values_L22), dplyr::if_else(is.na(stata_tmp_source_vector_L22), "", as.character(stata_tmp_source_vector_L22)), stata_tmp_decoded_values_L22)
data = dplyr::mutate(data, `group_str` = stata_tmp_decoded_values_L22)
rm(stata_tmp_decoded_values_L22, stata_tmp_source_vector_L22) 
data = dplyr::mutate(data, `group_str` = NA_character_)

## Decode values using haven::as_factor

stata_tmp_source_vector_L22 = data[['group_code']]

stata_tmp_decoded_values_L22 = as.character(haven::as_factor(stata_tmp_source_vector_L22))

stata_tmp_decoded_values_L22 = dplyr::if_else(is.na(stata_tmp_decoded_values_L22), dplyr::if_else(is.na(stata_tmp_source_vector_L22), "", as.character(stata_tmp_source_vector_L22)), stata_tmp_decoded_values_L22)

data = dplyr::mutate(data, `group_str` = stata_tmp_decoded_values_L22)

rm(stata_tmp_decoded_values_L22, stata_tmp_source_vector_L22)

 23 do:  sort group_code
 23 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group_code", "stata2r_original_order_idx"))) 
data = dplyr::arrange(data, !!!dplyr::syms(c("group_code", "stata2r_original_order_idx")))

Error: arrange() failed at implicit mutate() step. 
Problem with `mutate()` column `..2`.
ℹ `..2 = stata2r_original_order_idx`.
✖ object 'stata2r_original_order_idx' not found
Error executing R code for Stata line  23 :  data = dplyr::arrange(data, !!!dplyr::syms(c("group_code", "stata2r_original_order_idx")))

Error: arrange() failed at implicit mutate() step. 
Problem with `mutate()` column `..2`.
ℹ `..2 = stata2r_original_order_idx`.
✖ object 'stata2r_original_order_idx' not found 
