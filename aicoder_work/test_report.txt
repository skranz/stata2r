In total 2 of 3 tests failed.


---
Outcome of test 'source_r': ok
All R files could be sourced.



---
Outcome of test 'do1': not ok


Details:

cmd_df = do_parse(do_code)
cmd_df = mark_data_manip_cmd(cmd_df)

str(cmd_df)
'data.frame':	38 obs. of  10 variables:
 $ line                   : int  1 2 3 4 5 6 7 8 9 10 ...
 $ do_code                : chr  "use \"data.dta\", clear" "sort group i" "keep in 1/39" "list in 1/5" ...
 $ stata_cmd_original     : chr  "use" "sort" "keep" "list" ...
 $ stata_cmd              : chr  "use" "sort" "keep" "list" ...
 $ rest_of_cmd            : chr  "\"data.dta\", clear" "group i" "in 1/39" "in 1/5" ...
 $ is_by_prefix           : logi  FALSE FALSE FALSE FALSE FALSE TRUE ...
 $ by_group_vars          : chr  NA NA NA NA ...
 $ by_sort_vars           : chr  NA NA NA NA ...
 $ stata_translation_error: chr  NA NA NA NA ...
 $ do_translate           : logi  TRUE TRUE TRUE FALSE FALSE TRUE ...
NULL

---
#Translate Stata to R commands... ... translation done.
---
# Run translated R commands and compare results


 1 do:  use "data.dta", clear
 1 r:  data = haven::read_dta(file.path(stata2r_env$working_dir, "data.dta")) %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used 
data = haven::read_dta(file.path(stata2r_env$working_dir, "data.dta")) %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used

 2 do:  sort group i
 2 r:  data = dplyr::arrange(data, !!!dplyr::syms(c("group", "i"))) 
data = dplyr::arrange(data, !!!dplyr::syms(c("group", "i")))

 3 do:  keep in 1/39
 3 r:  data = dplyr::slice(data, 1:39) 
data = dplyr::slice(data, 1:39)

 4 do:  list in 1/5 

 4 r:  not translated since not flagged as data manipulation

 5 do:  display _n 

 5 r:  not translated since not flagged as data manipulation

 6 do:  by group: gen seq = _n
 6 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`seq` = as.numeric(dplyr::row_number())) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`seq` = as.numeric(dplyr::row_number())) %>% 
  dplyr::ungroup()

 7 do:  gen logi = log(i)
 7 r:  data = data %>% 
  dplyr::mutate(`logi` = log(i)) 
data = data %>% 
  dplyr::mutate(`logi` = log(i))

 8 do:  gen sqrt_i = sqrt(i)
 8 r:  data = data %>% 
  dplyr::mutate(`sqrt_i` = sqrt(i)) 
data = data %>% 
  dplyr::mutate(`sqrt_i` = sqrt(i))

 9 do:  gen group_num = cond(group=="A",1,cond(group=="B",2,3))
 9 r:  data = data %>% 
  dplyr::mutate(`group_num` = as.numeric(dplyr::if_else(group=="A", 1, dplyr::if_else(group=="B", 2, 3)))) 
data = data %>% 
  dplyr::mutate(`group_num` = as.numeric(dplyr::if_else(group=="A", 1, dplyr::if_else(group=="B", 2, 3))))

 10 do:  egen mean_i_grp = mean(i), by(group)
 10 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`mean_i_grp` = mean(i, na.rm = TRUE)) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`mean_i_grp` = mean(i, na.rm = TRUE)) %>% 
  dplyr::ungroup()

 11 do:  egen total_i = total(i)
 11 r:  data = data %>% 
  dplyr::mutate(`total_i` = sum(i, na.rm = TRUE)) 
data = data %>% 
  dplyr::mutate(`total_i` = sum(i, na.rm = TRUE))

 12 do:  bysort group: egen rank_i = rank(i)
 12 r:  data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`rank_i` = dplyr::min_rank(i)) %>% 
  dplyr::ungroup() 
data = data %>% 
  dplyr::group_by(!!!dplyr::syms(c("group"))) %>% 
  dplyr::mutate(`rank_i` = dplyr::min_rank(i)) %>% 
  dplyr::ungroup()

 13 do:  gen flag = (i>20) if group=="A"
 13 r:  data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else(dplyr::coalesce(group=="A", FALSE), as.numeric((i>20)), NA_real_)) 
data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else(dplyr::coalesce(group=="A", FALSE), as.numeric((i>20)), NA_real_))

 14 do:  replace flag = 0 if missing(flag)
 14 r:  data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else(dplyr::coalesce(is.na(flag), FALSE), 0, data$`flag`)) 
data = data %>% 
  dplyr::mutate(`flag` = dplyr::if_else(dplyr::coalesce(is.na(flag), FALSE), 0, data$`flag`))

 15 do:  keep if flag==1 | group=="B"
 15 r:  data = dplyr::filter(data, flag==1 | group=="B") 
data = dplyr::filter(data, flag==1 | group=="B")

 16 do:  drop if i>35
 16 r:  data = dplyr::filter(data, !(i>35)) 
data = dplyr::filter(data, !(i>35))

 17 do:  collapse (mean) i (sum) total_i_sum = i, by(group)
 17 r:  data = data %>% 
  collapse::fgroup_by(group) %>% 
  collapse::fsummarise(`i` = collapse::fmean(i, na.rm = TRUE),
  `total_i_sum` = collapse::fsum(total_i_sum, na.rm = TRUE)) %>% 
  collapse::fungroup() 
data = data %>% 
  collapse::fgroup_by(group) %>% 
  collapse::fsummarise(`i` = collapse::fmean(i, na.rm = TRUE),
  `total_i_sum` = collapse::fsum(total_i_sum, na.rm = TRUE)) %>% 
  collapse::fungroup()

Error: object 'total_i_sum' not found
Error executing R code for Stata line  17 :  data = data %>% 
  collapse::fgroup_by(group) %>% 
  collapse::fsummarise(`i` = collapse::fmean(i, na.rm = TRUE),
  `total_i_sum` = collapse::fsum(total_i_sum, na.rm = TRUE)) %>% 
  collapse::fungroup()

Error: object 'total_i_sum' not found 


---
Outcome of test 'do2': not ok


Details:

cmd_df = do_parse(do_code)
cmd_df = mark_data_manip_cmd(cmd_df)

str(cmd_df)
'data.frame':	82 obs. of  10 variables:
 $ line                   : int  1 2 3 4 5 6 7 8 9 10 ...
 $ do_code                : chr  "use \"test_data.dta\", clear" "generate value1_log = log(value1)" "generate value2_squared = value2^2" "generate int_value1 = int(value1) if !missing(value1)" ...
 $ stata_cmd_original     : chr  "use" "generate" "generate" "generate" ...
 $ stata_cmd              : chr  "use" "generate" "generate" "generate" ...
 $ rest_of_cmd            : chr  "\"test_data.dta\", clear" "value1_log = log(value1)" "value2_squared = value2^2" "int_value1 = int(value1) if !missing(value1)" ...
 $ is_by_prefix           : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...
 $ by_group_vars          : chr  NA NA NA NA ...
 $ by_sort_vars           : chr  NA NA NA NA ...
 $ stata_translation_error: chr  NA NA NA NA ...
 $ do_translate           : logi  TRUE TRUE TRUE TRUE TRUE TRUE ...
NULL

---
#Translate Stata to R commands... ... translation done.
---
# Run translated R commands and compare results


 1 do:  use "test_data.dta", clear
 1 r:  data = haven::read_dta(file.path(stata2r_env$working_dir, "test_data.dta")) %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used 
data = haven::read_dta(file.path(stata2r_env$working_dir, "test_data.dta")) %>%
  dplyr::mutate(stata2r_original_order_idx = dplyr::row_number()) # 'clear' was used

 2 do:  generate value1_log = log(value1)
 2 r:  data = data %>% 
  dplyr::mutate(`value1_log` = log(value1)) 
data = data %>% 
  dplyr::mutate(`value1_log` = log(value1))

 3 do:  generate value2_squared = value2^2
 3 r:  data = data %>% 
  dplyr::mutate(`value2_squared` = value2^2) 
data = data %>% 
  dplyr::mutate(`value2_squared` = value2^2)

 4 do:  generate int_value1 = int(value1) if !missing(value1)
 4 r:  data = data %>% 
  dplyr::mutate(`int_value1` = dplyr::if_else(dplyr::coalesce(!is.na(value1), FALSE), trunc(value1), NA_real_)) 
data = data %>% 
  dplyr::mutate(`int_value1` = dplyr::if_else(dplyr::coalesce(!is.na(value1), FALSE), trunc(value1), NA_real_))

 5 do:  generate rounded_value1 = round(value1, 0.1) if !missing(value1)
 5 r:  data = data %>% 
  dplyr::mutate(`rounded_value1` = dplyr::if_else(dplyr::coalesce(!is.na(value1), FALSE), sfun_stata_round(value1,  0.1), NA_real_)) 
data = data %>% 
  dplyr::mutate(`rounded_value1` = dplyr::if_else(dplyr::coalesce(!is.na(value1), FALSE), sfun_stata_round(value1,  0.1), NA_real_))

 6 do:  generate random_uniform_draw = runiform()
 6 r:  data = data %>% 
  dplyr::mutate(`random_uniform_draw` = stats::runif(as.numeric(dplyr::n()))) 
data = data %>% 
  dplyr::mutate(`random_uniform_draw` = stats::runif(as.numeric(dplyr::n())))

 7 do:  generate id_plus_value2 = id + value2 if value2 < 7 & !missing(value2)
 7 r:  data = data %>% 
  dplyr::mutate(`id_plus_value2` = dplyr::if_else(dplyr::coalesce(value2 < 7 & !is.na(value2), FALSE), sfun_stata_add(id, value2), NA_character_)) 
data = data %>% 
  dplyr::mutate(`id_plus_value2` = dplyr::if_else(dplyr::coalesce(value2 < 7 & !is.na(value2), FALSE), sfun_stata_add(id, value2), NA_character_))

Error: Problem with `mutate()` column `id_plus_value2`.
ℹ `id_plus_value2 = dplyr::if_else(...)`.
✖ `false` must be a double vector, not a character vector.
Caused by error in `glubort()`:
! `false` must be a double vector, not a character vector.
Error executing R code for Stata line  7 :  data = data %>% 
  dplyr::mutate(`id_plus_value2` = dplyr::if_else(dplyr::coalesce(value2 < 7 & !is.na(value2), FALSE), sfun_stata_add(id, value2), NA_character_))

Error: Problem with `mutate()` column `id_plus_value2`.
ℹ `id_plus_value2 = dplyr::if_else(...)`.
✖ `false` must be a double vector, not a character vector.
Caused by error in `glubort()`:
! `false` must be a double vector, not a character vector. 
